#!/bin/bash

# Function to start download and build.
function build_map(){
	shopt -u nocasematch
	### Log date and time
	echo -e ${ILCOLOR1}
	DATE_START=$(date +"%s")
	echo "Build Start Time:"
	DATE=$(date +"%m-%d-%y")
	echo "Date: $DATE"
	TIME=$(date +"%r")
	echo "Time: $TIME"
	echo -e ${ILRESTORE}
	sleep 1

	echo "${ILCOLOR1}Current .typ file being used is ${ILCOLOR2}$TYP_FILE.typ
${ILCOLOR1}Here is a list of available .typ files on your system:${ILRESTORE}"
	TYP_DIR="$HOME/maps/*.typ"
	for i in $TYP_DIR; do
		q="$(basename -- $i)"
		echo "$q"
	done
	sleep 2
	echo
	read -t 120 -p "Would you like to change the .typ file used?
${ILCOLOR1}You have 2 minutes to decide, then running current .typ - ${ILCOLOR2}$TYP_FILE.typ${ILRESTORE}[y/N]: " chng_typ
	sleep 1
	echo
	if [[ $chng_typ =~ ^([yY][eE][sS]|[yY])$ ]]; then
		read -p "Pick a .typ file from the list above and then type it WITHOUT .typ extention: " typ_name
		if test -f "$HOME/maps/$typ_name.typ"; then
			TYP_FILE="$typ_name"
			sleep 1
			echo
			echo "${ILCOLOR1}Okay running with ${ILCOLOR3}$TYP_FILE.typ"
			sleep 1
		else
			echo
			echo "${ILCOLOR1}Files does not exist. Check spelling next time. Continuing with last run .typ file - ${ILCOLOR2}$TYP_FILE.typ"
			sleep 1
		fi
	else
		echo
		echo "${ILCOLOR1}Okay, running with current .typ file - ${ILCOLOR2}$TYP_FILE.typ"
		echo
		sleep 1
	fi
	echo
	
	# Check dependencies and download latest versions of mkgmap and mkgmap-splitter
	sleep 1
	echo
	echo "${ILCOLOR1}Downloading latest version of mkgmap and mkgmap-splitter. . .${ILRESTORE}"
	echo
	$HOME/scripts/mkgmap-check
	echo
	echo
	$HOME/scripts/mkgmap-splitter-check
	echo
	echo
	echo "${ILCOLOR1}Checking dependencies for osmimum-tool and python3-pyosmium. . .${ILRESTORE}"
	echo
	if ! dpkg --get-selections | grep "osmium-tool"; then
		echo "spike" | sudo -S apt install osmium-tool
	else
		echo
		echo "osmium-tool already installed."
	fi
	echo
	sleep 1
	if ! dpkg --get-selections | grep "python3-pyosmium"; then
		echo "spike" | sudo -S apt install python3-pyosmium
	else
		echo
		echo "python3-pyosmium already installed."
	fi
	echo
	sleep 1
	# Error handling variable for file size errors.
	FILE=""
	MINSZ=100000
	echo
	echo "${ILCOLOR1}Downloading US Map from Geofabrik.com:"

# South
	cd $HOME/maps
	# Downloading maps from geofabrik.
	echo
	echo "${ILCOLOR1}Downloading South Region...${ILRESTORE}"
	sleep 1
	wget -O $HOME/maps/downloads/us_south_latest.osm.pbf http://download.geofabrik.de/north-america/us-south-latest.osm.pbf
	FILE="$HOME/maps/downloads/us_south_latest.osm.pbf"
	ACTSZ=$(wc -c <"$FILE")
	while [ $ACTSZ -lt $MINSZ ]; do
		wget -O $HOME/maps/downloads/us_south_latest.osm.pbf http://download.geofabrik.de/north-america/us-south-latest.osm.pbf
	done
	mv $HOME/maps/downloads/us_south_latest.osm.pbf $HOME/maps/combine/"$MAP_NAME"_us_south.osm.pbf
# Build South
	cd $HOME/maps/combine
	# Splitting the file with mkgmap program for managable conversion of size.
	echo
	echo "${ILCOLOR1}Splitting file...${ILRESTORE}"
	sleep 1
	java -jar $HOME/maps/splitter/splitter.jar $HOME/maps/combine/"$MAP_NAME"_us_south.osm.pbf --max-nodes=800000 --output=xml

	# Re-combining all split files into one Garmin .img file.
	echo
	echo "${ILCOLOR1}Creating img, this will take a while...${ILRESTORE}"
	sleep 1
	java -jar $HOME/maps/mkgmap/mkgmap.jar --style-file=$HOME/maps/styles/mine  --family-id=2000 --route --gmapsupp *.osm.gz $HOME/maps/"$TYP_FILE".typ

# Check for completed .img file and move to home/maps folder and the to Garmin device, if connected.
	if [[ -f $HOME/maps/combine/gmapsupp.img ]]; then
		echo
		echo "${ILCOLOR1}Moving gmapsupp.img to completed_maps folder and renaming to "$MAP_NAME"_us_south_gmapsupp.img...${ILRESTORE}"
		# Nameing and removing previous images in folder "completed_maps".
		if [[ -f "$HOME/maps/completed_maps/"$MAP_NAME"_us_south_gmapsupp.img" ]]; then
			rm -rf $HOME/maps/completed_maps/"$MAP_NAME"_us_south_gmapsupp.img.old
			mv $HOME/maps/completed_maps/"$MAP_NAME"_us_south_gmapsupp.img $HOME/maps/completed_maps/"$MAP_NAME"_us_south_gmapsupp.img.old
		fi
		# Renaming creeated image to custom named image and moving to correct directory "completed_maps".
		mv $HOME/maps/combine/gmapsupp.img $HOME/maps/completed_maps/"$MAP_NAME"_us_south_gmapsupp.img
		sleep 1

		echo
		echo "${ILCOLOR1}Checking for Garmin Device. . .${ILRESTORE}"
		sleep 1
		if [[ -d "$DEVICE" ]]; then
			echo "Garming device found. . ."
			echo
			sleep 1
			if [[ -f "$DEVICE"/Garmin/"$MAP_NAME"_us_south_gmapsupp.img ]];then
				echo "${ILCOLOR1}Removing old map from device. . .${ILRESTORE}"
				rm -rf "$DEVICE"/Garmin/"$MAP_NAME"_us_south_gmapsupp.img
				echo
				sleep 1
			fi
			echo "${ILCOLOR1}Copying new map to Garmin device. . .${ILRESTORE}"
			rsync --progress --verbose $HOME/maps/completed_maps/"$MAP_NAME"_us_south_gmapsupp.img "$DEVICE"/Garmin/"$MAP_NAME"_us_south_gmapsupp.img
		else
			echo
			echo "${ILCOLOR1}No Garmin Device found. Copy manually later.${ILRESTORE}"
		fi
			# Only clean up files if map.img was created successfully. 	Don't delete so a manual re-run can be done for error checking.
			echo
			echo "${ILCOLOR1}Cleaning up files...${ILRESTORE}"
			sleep 1
			rm -rf $HOME/maps/combine/*
			rm -rf $HOME/maps/downloads/*
	else
		echo
		echo "${ILCOLOR1}No map file was created, check for errors...${ILRESTORE}"
	fi

# Midwest
	cd $HOME/maps
	# Downloading maps from geofabrik.
	echo
	echo "${ILCOLOR1}Downloading Midwest Region...${ILRESTORE}"
	sleep 1
	wget -O $HOME/maps/downloads/us_midwest_latest.osm.pbf http://download.geofabrik.de/north-america/us-midwest-latest.osm.pbf
	FILE="$HOME/maps/downloads/us_midwest_latest.osm.pbf"
	ACTSZ=$(wc -c <"$FILE")
	while [ $ACTSZ -lt $MINSZ ]; do
		wget -O $HOME/maps/downloads/us_midwest_latest.osm.pbf http://download.geofabrik.de/north-america/us-midwest-latest.osm.pbf
	done
	mv $HOME/maps/downloads/us_midwest_latest.osm.pbf $HOME/maps/combine/"$MAP_NAME"_us_midwest.osm.pbf
# Build Midwest
	cd $HOME/maps/combine
	# Splitting the file with mkgmap program for managable conversion of size.
	echo
	echo "${ILCOLOR1}Splitting file...${ILRESTORE}"
	sleep 1
	java -jar $HOME/maps/splitter/splitter.jar $HOME/maps/combine/"$MAP_NAME"_us_midwest.osm.pbf --max-nodes=800000 --output=xml

	# Re-combining all split files into one Garmin .img file.
	echo
	echo "${ILCOLOR1}Creating img, this will take a while...${ILRESTORE}"
	sleep 1
	java -jar $HOME/maps/mkgmap/mkgmap.jar --style-file=$HOME/maps/styles/mine  --family-id=2000 --route --gmapsupp *.osm.gz $HOME/maps/"$TYP_FILE".typ

# Check for completed .img file and move to home/maps folder and the to Garmin device, if connected.
	if [[ -f $HOME/maps/combine/gmapsupp.img ]]; then
		echo
		echo "${ILCOLOR1}Moving gmapsupp.img to completed_maps folder and renaming to "$MAP_NAME"_us_midwest_gmapsupp.img...${ILRESTORE}"
		# Nameing and removing previous images in folder "completed_maps".
		if [[ -f "$HOME/maps/completed_maps/"$MAP_NAME"_us_midwest_gmapsupp.img" ]]; then
			rm -rf $HOME/maps/completed_maps/"$MAP_NAME"_us_midwest_gmapsupp.img.old
			mv $HOME/maps/completed_maps/"$MAP_NAME"_us_midwest_gmapsupp.img $HOME/maps/completed_maps/"$MAP_NAME"_us_midwest_gmapsupp.img.old
		fi
		# Renaming creeated image to custom named image and moving to correct directory "completed_maps".
		mv $HOME/maps/combine/gmapsupp.img $HOME/maps/completed_maps/"$MAP_NAME"_us_midwest_gmapsupp.img
		sleep 1

		echo
		echo "${ILCOLOR1}Checking for Garmin Device. . .${ILRESTORE}"
		sleep 1
		if [[ -d "$DEVICE" ]]; then
			echo "Garming device found. . ."
			echo
			sleep 1
			if [[ -f "$DEVICE"/Garmin/"$MAP_NAME"_us_midwest_gmapsupp.img ]];then
				echo "${ILCOLOR1}Removing old map from device. . .${ILRESTORE}"
				rm -rf "$DEVICE"/Garmin/"$MAP_NAME"_us_midwest_gmapsupp.img
				echo
				sleep 1
			fi
			echo "${ILCOLOR1}Copying new map to Garmin device. . .${ILRESTORE}"
			rsync --progress --verbose $HOME/maps/completed_maps/"$MAP_NAME"_us_midwest_gmapsupp.img "$DEVICE"/Garmin/"$MAP_NAME"_us_midwest_gmapsupp.img
		else
			echo
			echo "${ILCOLOR1}No Garmin Device found. Copy manually later.${ILRESTORE}"
		fi
			# Only clean up files if map.img was created successfully. 	Don't delete so a manual re-run can be done for error checking.
			echo
			echo "${ILCOLOR1}Cleaning up files...${ILRESTORE}"
			sleep 1
			rm -rf $HOME/maps/combine/*
			rm -rf $HOME/maps/downloads/*
	else
		echo
		echo "${ILCOLOR1}No map file was created, check for errors...${ILRESTORE}"
	fi

# Northeast
	cd $HOME/maps
	# Downloading maps from geofabrik.
	echo
	echo "${ILCOLOR1}Downloading Northeast Region...${ILRESTORE}"
	sleep 1
	wget -O $HOME/maps/downloads/us_northeast_latest.osm.pbf http://download.geofabrik.de/north-america/us-northeast-latest.osm.pbf
	FILE="$HOME/maps/downloads/us_northeast_latest.osm.pbf"
	ACTSZ=$(wc -c <"$FILE")
	while [ $ACTSZ -lt $MINSZ ]; do
		wget -O $HOME/maps/downloads/us_northeast_latest.osm.pbf http://download.geofabrik.de/north-america/us-northeast-latest.osm.pbf
	done
	mv $HOME/maps/downloads/us_northeast_latest.osm.pbf $HOME/maps/combine/"$MAP_NAME"_us_northeast.osm.pbf
# Build Northeast
	cd $HOME/maps/combine
	# Splitting the file with mkgmap program for managable conversion of size.
	echo
	echo "${ILCOLOR1}Splitting file...${ILRESTORE}"
	sleep 1
	java -jar $HOME/maps/splitter/splitter.jar $HOME/maps/combine/"$MAP_NAME"_us_northeast.osm.pbf --max-nodes=800000 --output=xml

	# Re-combining all split files into one Garmin .img file.
	echo
	echo "${ILCOLOR1}Creating img, this will take a while...${ILRESTORE}"
	sleep 1
	java -jar $HOME/maps/mkgmap/mkgmap.jar --style-file=$HOME/maps/styles/mine  --family-id=2000 --route --gmapsupp *.osm.gz $HOME/maps/"$TYP_FILE".typ

# Check for completed .img file and move to home/maps folder and the to Garmin device, if connected.
	if [[ -f $HOME/maps/combine/gmapsupp.img ]]; then
		echo
		echo "${ILCOLOR1}Moving gmapsupp.img to completed_maps folder and renaming to "$MAP_NAME"_us_northeast_gmapsupp.img...${ILRESTORE}"
		# Nameing and removing previous images in folder "completed_maps".
		if [[ -f "$HOME/maps/completed_maps/"$MAP_NAME"_us_northeast_gmapsupp.img" ]]; then
			rm -rf $HOME/maps/completed_maps/"$MAP_NAME"_us_northeast_gmapsupp.img.old
			mv $HOME/maps/completed_maps/"$MAP_NAME"_us_northeast_gmapsupp.img $HOME/maps/completed_maps/"$MAP_NAME"_us_northeast_gmapsupp.img.old
		fi
		# Renaming creeated image to custom named image and moving to correct directory "completed_maps".
		mv $HOME/maps/combine/gmapsupp.img $HOME/maps/completed_maps/"$MAP_NAME"_us_northeast_gmapsupp.img
		sleep 1

		echo
		echo "${ILCOLOR1}Checking for Garmin Device. . .${ILRESTORE}"
		sleep 1
		if [[ -d "$DEVICE" ]]; then
			echo "Garming device found. . ."
			echo
			sleep 1
			if [[ -f "$DEVICE"/Garmin/"$MAP_NAME"_us_northeast_gmapsupp.img ]];then
				echo "${ILCOLOR1}Removing old map from device. . .${ILRESTORE}"
				rm -rf "$DEVICE"/Garmin/"$MAP_NAME"_us_northeast_gmapsupp.img
				echo
				sleep 1
			fi
			echo "${ILCOLOR1}Copying new map to Garmin device. . .${ILRESTORE}"
			rsync --progress --verbose $HOME/maps/completed_maps/"$MAP_NAME"_us_northeast_gmapsupp.img "$DEVICE"/Garmin/"$MAP_NAME"_us_northeast_gmapsupp.img
			else
			echo
			echo "${ILCOLOR1}No Garmin Device found. Copy manually later.${ILRESTORE}"
		fi
			# Only clean up files if map.img was created successfully. 	Don't delete so a manual re-run can be done for error checking.
			echo
			echo "${ILCOLOR1}Cleaning up files...${ILRESTORE}"
			sleep 1
			rm -rf $HOME/maps/combine/*
			rm -rf $HOME/maps/downloads/*	
	else
		echo
		echo "${ILCOLOR1}No map file was created, check for errors...${ILRESTORE}"
	fi

# West
	cd $HOME/maps
	# Downloading maps from geofabrik.
	echo
	echo "${ILCOLOR1}Downloading West Region...${ILRESTORE}"
	sleep 1
	wget -O $HOME/maps/downloads/us_west_latest.osm.pbf http://download.geofabrik.de/north-america/us-west-latest.osm.pbf
	FILE="$HOME/maps/downloads/us_west_latest.osm.pbf"
	ACTSZ=$(wc -c <"$FILE")
	while [ $ACTSZ -lt $MINSZ ]; do
		wget -O $HOME/maps/downloads/us_west_latest.osm.pbf http://download.geofabrik.de/north-america/us-west-latest.osm.pbf
	done
	mv $HOME/maps/downloads/us_west_latest.osm.pbf $HOME/maps/combine/"$MAP_NAME"_us_west.osm.pbf
# Build West
	cd $HOME/maps/combine
	# Splitting the file with mkgmap program for managable conversion of size.
	echo
	echo "${ILCOLOR1}Splitting file...${ILRESTORE}"
	sleep 1
	java -jar $HOME/maps/splitter/splitter.jar $HOME/maps/combine/"$MAP_NAME"_us_west.osm.pbf --max-nodes=800000 --output=xml

	# Re-combining all split files into one Garmin .img file.
	echo
	echo "${ILCOLOR1}Creating img, this will take a while...${ILRESTORE}"
	sleep 1
	java -jar $HOME/maps/mkgmap/mkgmap.jar --style-file=$HOME/maps/styles/mine  --family-id=2000 --route --gmapsupp *.osm.gz $HOME/maps/"$TYP_FILE".typ

# Check for completed .img file and move to home/maps folder and the to Garmin device, if connected.
	if [[ -f $HOME/maps/combine/gmapsupp.img ]]; then
		echo
		echo "${ILCOLOR1}Moving gmapsupp.img to completed_maps folder and renaming to "$MAP_NAME"_us_west_gmapsupp.img...${ILRESTORE}"
		# Nameing and removing previous images in folder "completed_maps".
		if [[ -f "$HOME/maps/completed_maps/"$MAP_NAME"_us_west_gmapsupp.img" ]]; then
			rm -rf $HOME/maps/completed_maps/"$MAP_NAME"_us_west_gmapsupp.img.old
			mv $HOME/maps/completed_maps/"$MAP_NAME"_us_west_gmapsupp.img $HOME/maps/completed_maps/"$MAP_NAME"_us_west_gmapsupp.img.old
		fi
		# Renaming creeated image to custom named image and moving to correct directory "completed_maps".
		mv $HOME/maps/combine/gmapsupp.img $HOME/maps/completed_maps/"$MAP_NAME"_us_west_gmapsupp.img
		sleep 1

		echo
		echo "${ILCOLOR1}Checking for Garmin Device. . .${ILRESTORE}"
		sleep 1
		if [[ -d "$DEVICE" ]]; then
			echo "Garming device found. . ."
			echo
			sleep 1
			if [[ -f "$DEVICE"/Garmin/"$MAP_NAME"_us_west_gmapsupp.img ]];then
				echo "${ILCOLOR1}Removing old map from device. . .${ILRESTORE}"
				rm -rf "$DEVICE"/Garmin/"$MAP_NAME"_us_west_gmapsupp.img
				echo
				sleep 1
			fi
			echo "${ILCOLOR1}Copying new map to Garmin device. . .${ILRESTORE}"
			rsync --progress --verbose $HOME/maps/completed_maps/"$MAP_NAME"_us_west_gmapsupp.img "$DEVICE"/Garmin/"$MAP_NAME"_us_west_gmapsupp.img
		else
			echo
			echo "${ILCOLOR1}No Garmin Device found. Copy manually later.${ILRESTORE}"
		fi
		# Only clean up files if map.img was created successfully. 	Don't delete so a manual re-run can be done for error checking.
		echo
		echo "${ILCOLOR1}Cleaning up files...${ILRESTORE}"
		sleep 1
		rm -rf $HOME/maps/combine/*
		rm -rf $HOME/maps/downloads/*	
	else
		echo
		echo "${ILCOLOR1}No map file was created, check for errors...${ILRESTORE}"
	fi

	echo
	echo "${ILCOLOR1}Finished."
	sleep 1
	echo "Build End Time:"
	DATE=$(date +"%m-%d-%y")
	echo "Date: $DATE"
	TIME=$(date +"%r")
	echo "Time: $TIME"
	DATE_END=$(date +"%s")
	DIFF=$(($DATE_END - $DATE_START))
	echo "It took $(($DIFF / 3600 )) hours $((($DIFF % 3600) / 60)) minutes $(($DIFF % 60)) seconds to build."
	echo -e "${ILRESTORE}"

	cd $HOME
	exit
}

# Dependencies: program mkgmap, osmium. Also a mkgmap, gmt, and mkgmap-splitter folder downloaded from source.

########## Start Process #############
# Check if device is connected and don't run until it is, unless 'b' is typed for bypass.
echo
echo "Running My US Map Builder for Garmin devices. . ."
sleep 1
echo
# Switching to map directory.
cd $HOME/maps
# Define variables.
DEVICE="/media/msifland/GARMIN"
# MAP_NAME should be the name of the .typ file you use.
TYP_FILE="velo"
MAP_NAME="my_$TYP_FILE"
echo "${ILCOLOR1}Checking directories and Cleaning up files...${ILRESTORE}"
echo
# Create directories if they don't exist.
if [[ ! -d "$HOME/maps" ]]; then
	mkdir "$HOME/maps"
fi
if [[ ! -d "$HOME/maps/completed_maps" ]]; then
	mkdir "$HOME/maps/completed_maps"
fi
if [[ ! -d "$HOME/maps/combine" ]]; then
	mkdir "$HOME/maps/combine"
else
	rm -rf $HOME/maps/combine/*
fi
if [[ ! -d "$HOME/maps/downloads" ]]; then
	mkdir "$HOME/maps/downloads"
else
	rm -rf $HOME/maps/downloads/*
fi

# Call build_map function to start the process.
build_map
