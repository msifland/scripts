#!/bin/bash
# Removing kernels: image is located at /boot/
#                   headers is located at /usr/src/
#                   modules is located at /lib/modules/

# Check if script has been run as root.
if [[ ! "$USER" = "root" ]]; then
	echo "This script must be run as root!"
	exit
fi

echo
echo "${ILCOLOR3}Purging old kernels. Here are the kernels on your system, newest first: ${ILRESTORE}"
sleep 1

########## This section is for unsigned kernels if presetn #########
# Gathering system kernels and slightly renaming for apt purposes. Creating a tmp file to write them too for reference.
# This line was added for 'unsigned generic' kernels. The word 'unsigned' does not appear in the /boot/vmlinuz kernel name, therfore has to be added.
#KERNS1=$(ls /boot | grep "generic" | grep "linuz" | sed 's:vmlinuz:linux-image-unsigned:g')
# This one is for non-unsigned kernels
#KERNS2=$(ls /boot/vmlinuz* | sed 's:/boot/vmlinuz:linux-image:g' | sed '/generic/d' | sort -V | tac)
##################################################################

KERNS1=$(ls /boot/vmlinuz* | sed 's:/boot/vmlinuz:linux-image:g' | sort -V | tac)
KERN_FILE=$HOME/tmp/kern_file
rm -rf $KERN_FILE

if [[ ! -f $KERN_FILE ]]; then
	touch $KERN_FILE
fi
				# This goes with the above for unsigned kernels
KERNS="$KERNS1" #$KERNS2"

# Loop to list the kernels in the file on numbered lines and echo them on screen.
n=0
for i in $KERNS; do
	let n=n+1
	echo "$n. $i" >> $KERN_FILE
	echo "$n. $i"
	sleep .5
done
echo "${ILCOLOR3}-----> Currently running $(uname -r)${ILRESTORE}" | pv -qL 35
sleep 1

KERN_COUNT=$(cat $KERN_FILE | wc -l)
if [[ $KERN_COUNT > 6 ]]; then
	echo
	echo "Too many kernels on your system, removing some now. . ."
	sleep 1
	KERN_FILE_COUNT="$HOME/tmp/kern_file_count"
	rm -rf $KERN_FILE_COUNT
	if [[ ! -f $KERN_FILE_COUNT ]]; then
		touch $KERN_FILE_COUNT
	fi
	echo $(sed -n '=' $KERN_FILE) > $KERN_FILE_COUNT
	COUNT=$(cat $KERN_FILE_COUNT)
	COUNT_RMV=${COUNT:1:-1}
	RMV=$(echo $COUNT_RMV | sed 's: :,:g')
else
	echo
	echo "There are $KERN_COUNT kernels on your system, need more than 6 to auto-remove. Exiting now. . ."
	sleep 1
	exit
fi

# Create funtion to select kernels and if incorrect retry.
function slct_krns(){
	# Format for removal, removing commas and listing individually
	FOR_REM=$(echo $RMV | tr , "\n" | grep -o .)
	sleep 1

	# Loop through the line numers from above grepping the created file for lines beginning with those numbers. Error handling here for line numbers that don't exist.
	echo
	echo "${ILCOLOR3}Kernels set to remove: ${ILRESTORE}"
	for n in $FOR_REM; do
		if grep -q "^$n" $KERN_FILE; then
			echo $(grep "^$n" $KERN_FILE)	
		else
			# These are just examples of using a newline charater in and echo.
			echo -e "!!!****************!!!\nError detected! No number $n. "$'\nRe-run script.\n\n'
			exit
		fi
	done
	sleep 1
}
# Call function
slct_krns

for j in $FOR_REM; do
	if grep -q "^$j" $KERN_FILE; then
		grep -q "^$j. linux" $KERN_FILE | sed "s:$j. ::g" # | sed 's:-generic::g'
		# Kernel
		REM1=" "$(grep "^$j. linux" $KERN_FILE | sed "s:$j. ::g") # | sed 's:-generic::g')
		# Headers
		REM2=" "$(grep "^$j. linux" $KERN_FILE | sed "s:$j. ::g" | sed 's:-image-:-headers-:g' | sed 's:-unsigned::g' | sed 's:-generic::g') # REvmoving 'generic' here because of the 'all' headers installed.
		# Modules
		REM3=" "$(grep "^$j. linux" $KERN_FILE | sed "s:$j. ::g" | sed 's:-image-:-modules-:g' | sed 's:-unsigned::g')
		# For removeing nvidia module-assistant build
		REM4=$(grep "^$j. linux" $KERN_FILE | sed "s:$j. ::g" | sed 's:linux-image-::g' | sed 's:-unsigned::g')
		REM5=$(grep "^$j. linux" $KERN_FILE | sed "s:$j. ::g" | sed 's:linux-image:initrd.img:g' | sed 's: ::g')
	fi

	# If all is good, then remove.
	echo
	# Image
	REM_HDRS1=$(echo $REM1)
	k_file=$(echo $REM_HDRS1 | sed 's:linux-image:vmlinuz:' | sed 's:unsigned-::g')
	if [[ -f /boot/"$k_file" ]]; then
		echo "y" | apt purge $REM_HDRS1
	else
		echo
		echo "${ILCOLOR3}No kernel image found. $k_file${ILRESTORE}"
		sleep 1
	fi

	# Headers all and specific
	REM_HDRS2=$(echo $REM2)
	if ls /usr/src/$REM_HDRS2 > /dev/null 2>&1; then
		echo "y" | apt purge $REM_HDRS2
	else
		echo
		echo "${ILCOLOR3}No headers files found. $REM_HDRS2${ILRESTORE}"
		sleep 1
	fi

	# Modules, usually uninstalls with first(image) uninstall. Sometimes it doesn't so added some error handling here with exit status.
	REM_HDRS3=$(echo $REM3)
	m_file=$(echo $REM_HDRS3 | sed 's:linux-modules-::g')
	if ls /lib/modules/$m_file > /dev/null 2>&1; then
		sleep 1
		if ! apt purge -y $REM_HDRS3; then
			echo
			echo "${ILCOLOR3}Errors while trying to remove. Trying to remove manually. . .${ILRESTORE}"
			sleep 1
			echo "sudo rm -rf /lib/modules/$m_file"
			sudo rm -rf /lib/modules/"$m_file"
			echo "sudo rm -rf /usr/lib/debug/lib/modules/$m_file"
			sudo rm -rf /usr/lib/debug/lib/modules/"$m_file"
			if [ $? -ne 0 ]; then
				echo
				echo "Not removed, check path and remove manyally. . ."
				sleep 1
			else
				echo
				echo "Succeeded removal."
				sleep 1
			fi
		fi
	else
		echo
		echo "${ILCOLOR3}No modules files found. $m_file${ILRESTORE}"
		sleep 1
	fi

	echo
	echo "Removing /boot/$REM5"
	sleep 1
	if [[ -f /boot/$REM5 ]]; then
		rm -rf /boot/$REM5
		echo
		echo "/boot/$REM5 removed."
	else
		echo
		echo "	No file /boot/$REM5"
	fi
	sleep 1

	# Removing module-assistant nvidia build.
	if dpkg --get-selections | grep -wq "nvidia-legacy-390xx-kernel-$REM4"; then
		echo
		echo "Removing modules built by module-assistant for nvidia drivers. . ."
		sleep 1
		sudo apt -y purge nvidia-legacy-390xx-kernel-"$REM4"
	fi
	if ls /usr/src/ | grep -q  nvidia-legacy-390xx-kernel-"$REM4"; then
		echo "sudo rm -rf /usr/src/nvidia-legacy-390xx-kernel-$REM4*.*"
		sudo rm -rf /usr/src/nvidia-legacy-390xx-kernel-"$REM4"*.*
	fi
done

# Check for errors.
if [ $? -eq 0 ]; then
	echo
	echo "${ILCOLOR3}All is good.${ILRESTORE}"
else
	echo
	echo "Error detected!!!"
fi
sleep 1

rm -f $KERN_FILE
rm -f $KERN_FILE_COUNT
echo
echo ${ILCOLOR3}$'\nShowing remaining kernles now on your system. . .'${ILRESTORE}
sleep 1

KERNS=$(ls /boot/vmlinuz* | sed 's:/boot/vmlinuz:linux-image:g' | sort -V | tac)

for k in $KERNS; do
	echo $k
	sleep .5
done
echo "${ILCOLOR2}-----> Currently running $(uname -r)${ILRESTORE}" | pv -qL 35
sleep 1
echo
exit




