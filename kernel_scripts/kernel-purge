#!/bin/bash
# Removing kernels: image is located at /boot/
#                   headers is located at /usr/src/
#                   modules is located at /lib/modules/


# Check if script has been run as root.
if [[ ! "$USER" = "root" ]]; then
	echo "This script must be run as root!"
	exit
fi

echo
echo "${ILCOLOR3}Purging old kernels. Here are the kernels on your system, newest first: ${ILRESTORE}"
sleep 1

# Gathering system kernels and slightly renaming for apt purposes. Creating a tmp file to write them too for reference.
# This line was added for 'unsigned generic' kernels. The word 'unsigned' does not appear in the /boot/vmlinuz kernel name, therfore has to be added.
KERNS1=$(ls /boot | grep "generic" | grep "linuz" | sed 's:vmlinuz:linux-image-unsigned:g')
# This one is for non-unsigned kernels
KERNS2=$(ls /boot/vmlinuz* | sed 's:/boot/vmlinuz:linux-image:g' | sed '/generic/d' | sort -V | tac)

KERN_FILE=$HOME/tmp/kern_file
rm -rf $KERN_FILE

if [[ ! -f $KERN_FILE ]]; then
	touch $KERN_FILE
fi

KERNS="$KERNS1 $KERNS2"
# Loop to list the kernels in the file on numbered lines and echo them on screen.
n=0
for i in $KERNS; do
	let n=n+1
	echo "$n. $i" >> $KERN_FILE
	echo "$n. $i"
	sleep .5
done
echo "${ILCOLOR3}-----> Currently running $(uname -r)${ILRESTORE}" | pv -qL 35
sleep 1

# Ask to select line numbers for removal separated by commas. Then remove those commas and grep them to individual lines.
echo
read -p "Type the line numbers of the kerenels you want to uninstall, separted by a comma.(ex. 2,4,1) Or type 0 to exit: " RMV
if [[ "$RMV" = 0 ]]; then
	echo
	echo "Ok, exiting now."
	rm -f $KERN_FILE
	sleep 1
	exit
fi

# Format for removal, removing commas and listing individually
FOR_REM=$(echo $RMV | sed 's:,::g' | grep -o .)
sleep 1

# Loop through the line numers from above grepping the created file for lines beginning with those numbers. Error handling here for line numbers that don't exist.
echo
echo "${ILCOLOR3}Kernels set to remove: ${ILRESTORE}"
for j in $FOR_REM; do
	if grep -q "^$j" $KERN_FILE; then
		grep "^$j. linux" $KERN_FILE | sed "s:$j. ::g" # | sed 's:-generic::g'
		echo $KERNS_REM
		REM1=" "$(grep "^$j. linux" $KERN_FILE | sed "s:$j. ::g") # | sed 's:-generic::g')	
		REM2=" "$(grep "^$j. linux" $KERN_FILE | sed "s:$j. ::g" | sed 's:-image-:-headers-:g' | sed 's:-unsigned::g' | sed 's:-generic::g') # REvmoving 'generic' here because of the 'all' headers installed.
		REM3=" "$(grep "^$j. linux" $KERN_FILE | sed "s:$j. ::g" | sed 's:-image-:-modules-:g' | sed 's:-unsigned::g')
	else
		# These are just examples of using a newline charater in and echo.
		echo -e "!!!****************!!!\nError detected! No number $j. "$'\nRe-run script.\n\n'
		exit
	fi


# If all is good, then remove.
echo
# Image
REM_HDRS1=$(echo $REM1) # | cut -f 1,2,3,4,5 -d "-")
k_file=$(echo $REM_HDRS1 | sed 's:linux-image:vmlinuz:' | sed 's:unsigned-::g')
if [[ -f /boot/"$k_file" ]]; then
	echo "y" | apt purge $REM_HDRS1
else
	echo "${ILCOLOR3}No kernel image found. $k_file${ILRESTORE}"
fi

# Headers all and  specific
REM_HDRS2=$(echo $REM2) # | cut -f 1,2,3,4 -d "-")
if ls /usr/src/$REM_HDRS2 > /dev/null 2>&1; then
	echo "y" | apt purge $REM_HDRS2
else
	echo "${ILCOLOR3}No headers files found. $REM_HDRS2${ILRESTORE}"
fi

# Modules, usually uninstalls with first(image) uninstall.
REM_HDRS3=$(echo $REM3) # | cut -f 1,2,3,4 -d "-")
m_file=$(echo $REM_HDRS3 | sed 's:linux-modules-::g')
if ls /lib/modules/$m_file > /dev/null 2>&1; then
	echo "y" | apt purge $REM_HDRS3
else
	echo "${ILCOLOR3}No modules files found. $m_file${ILRESTORE}"
fi
done
sleep 3
if [[ $? = 0 ]]; then
	echo
	echo "${ILCOLOR3}All is good.${ILRESTORE}"
else
	echo
	echo "Error detected!!!"
fi
sleep 1

rm -f $KERN_FILE
echo
echo ${ILCOLOR3}$'\nShowing remaining kernles now on your system. . .'${ILRESTORE}
sleep 1

KERNS=$(ls /boot/vmlinuz* | sed 's:/boot/vmlinuz:linux-image:g' | sort -V | tac)

for k in $KERNS; do
	echo $k
	sleep .5
done
echo "${ILCOLOR2}-----> Currently running $(uname -r)${ILRESTORE}" | pv -qL 35
sleep 1

echo
