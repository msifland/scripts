#!/bin/bash
# This is a blank bash script document.
# Put your code below this line.
# Removing old files and creating new ones.

rm -fr $HOME/tmp/*.deb
rm -rf $HOME/tmp/*.deb.*
echo
KERN_FILE=$HOME/tmp/kern-file
STOR_DIR="$HOME/tmp/kernel_storage"
if [[ ! -f $KERN_FILE ]]; then
	touch $KERN_FILE
fi

VER="4"
read -p "Current kernel version in script is $VER, would you like to keep it[Y/n]? " YNVER1
if [[ "$YNVER" =~ ^([yY][eE][sS]|[yY]|'')$ ]]; then	
	echo "OK, keeping current version of $VER"
else
	read -p "What verion would you like to change the script to(e.g. 4, 5, etc.)? " NEWVER
	sed -i "s:ver=\"$VER\":ver1=\"$NEWVER\":g" $HOME/scripts/kernel_scripts/kernel-check
	$HOME/scripts/kernel_scripts/kernel-ubuntu && exit
fi
echo

echo "" > $KERN_FILE
echo "${ILCOLOR2}Here are the 50 lastest available kernels from Ubuntu ppa-mainline. . .${ILRESTORE}"
sleep 5

KERN_LIST=$(wget -qO- http://kernel.ubuntu.com/\~kernel-ppa/mainline/ | grep "v[0-9]" | sed -e 's:.* href="::g' -e 's:/">.*$::' | tail -n50 | sort -V)
# Loop to list the kernels in the file on numbered lines and echo them on screen.

n=0
for i in $KERN_LIST; do
	let n=n+1
	echo "$n. $i" >> $KERN_FILE
	echo "$n. $i"
done

# Get kernel name without extra numbers at the end. The awk section here is nice in that everything after the '-' is deleted.
RNNING=$(uname -r | awk -F '\\-' '{print $1}')
echo "${ILCOLOR2}-----> Currently running $RNNING" | pv -qL 50
sleep 1

#----------- This section has 2 places to change version number ---------
# This also checks the kernel source website for the latest kernel to build.
echo
echo "${ILCOLOR2}Also checking if there is a new kernel to BUILD from main kernel source: kernel.org. Checking versions $VER. If there is a newer version and you want to build it you have to call the 'kernel-build' script.${ILRESTORE}"
sleep 1

# Get and format websit info.
GET=$(wget -qO- https://www.kernel.org/pub/linux/kernel/v"$VER".x/ | grep "linux-$VER" | grep ".tar.xz" | sed -e 's:.*"linux-::' -e 's:.tar.xz.*$::' | sort -V | tail -n1)
#----------------------------------------------------------------------

echo "-----> Newest kernel from kernel source is $GET"
sleep 1

function install_kern(){
# Ask to select line numbers for install
echo
read -p "Type the line number of the kernel you want to install(Type 0 to exit): " INST
sleep 1
if [[ "$INST" = "0" ]]; then
	# Remove old files.
	rm -rf $KERN_FILE
	rm -fr $HOME/tmp/*.deb
	rm -rf $HOME/tmp/*.deb.*
	exit
fi

# Format for web search purposes.
FOR_INSTt=$(grep "^$INST. v" $KERN_FILE | sed "s:$INST. ::g")
echo $FOR_INST
cd $HOME/tmp
if test $FOR_INST; then
	# More formatting for web search.
	KERN_ALL=$(wget -qO- http://kernel.ubuntu.com/\~kernel-ppa/mainline/"$FOR_INST"/ | grep "all.deb" | sed 's:&nbsp;   <a href="::g' | awk -F '\\.deb' '{print $1}' | head -n1)".deb"
	KERN_HEAD=$(wget -qO- http://kernel.ubuntu.com/~kernel-ppa/mainline/"$FOR_INST"/ | grep "amd64.deb" | sed 's:&nbsp;   <a href="::g' | awk -F '\\.deb' '{print $1}' | head -n1)".deb"

	# Download files.
	echo "${ILCOLOR2}Downloading $KERN_ALL${ILRESTORE}"
	wget http://kernel.ubuntu.com/~kernel-ppa/mainline/"$FOR_INST"/"$KERN_ALL"
	echo "${ILCOLOR2}Downloading $KERN_HEAD${ILRESTORE}"
	wget http://kernel.ubuntu.com/~kernel-ppa/mainline/"$FOR_INST"/"$KERN_HEAD"
	KERN_IMG=$(echo $KERN_HEAD | sed 's:headers:image-unsigned:g')
	echo "${ILCOLOR2}Downloading $KERN_IMG${ILRESTORE}"
	wget http://kernel.ubuntu.com/~kernel-ppa/mainline/"$FOR_INST"/"$KERN_IMG"
	MODULES=$(echo $KERN_HEAD | sed 's:headers:modules:g')
	echo "${ILCOLOR2}Downloading $MODULES${ILRESTORE}"
	wget http://kernel.ubuntu.com/~kernel-ppa/mainline/"$FOR_INST"/"$MODULES"

# Install files.
echo 'spike' | sudo -S dpkg -i *all.deb
echo 'spike' | sudo -S dpkg -i *modules*.deb
echo 'spike' | sudo -S  dpkg -i *.deb

else
	echo
	echo "Invalid entry, try again. . ."
	sleep 1
	install_kern
fi
}
install_kern
# Create kernel storage directory.
if [[ ! -d $STOR_DIR ]]; then
	mkdir $STOR_DIR
fi
# Error handling if directory exists but is empty. Using ls instead of [[ -f ]] for wildcards.
if [[ $(ls $STOR_DIR) ]]; then
	ls $STOR_DIR/* -t | tail -n +22 | xargs rm -f
fi
cp $HOME/tmp/*.deb $STOR_DIR
# Remove old files.
if [[ -f "$KERN_FILE" ]]; then
	rm -rf $KERN_FILE
fi
if ls $HOME/tmp/*.deb > /dev/null 2>&1; then
	rm -fr $HOME/tmp/*.deb
fi
