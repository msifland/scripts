#!/bin/bash
# This is a blank bash script document.
# Put your code below this line.
# Set kernel version prefix number to look for. If changed then rerun script with new version number inserted and saved in this file.

<< Comment
VER1="4"
read -p "Current kernel version in script is $VER1, would you like to keep it[Y/n]? " YNVER1
if [[ "$YNVER1" =~ ^([yY][eE][sS]|[yY]|'')$ ]]; then	
	echo "OK, keeping current version of $VER1"
else
	read -p "What verion would you like to change the script to(e.g. 4, 5, etc.)? " NEWVER1
	sed -i "s:VER1=\"$VER1\":VER1=\"$NEWVER1\":g" $HOME/scripts/kernel_scripts/kernel-check
	$HOME/scripts/kernel_scripts/kernel-check && exit
fi
echo

# This shows the latest 25 kernels under above version prefix.
echo "${ILCOLOR2}Here are the 25 lastest available kernels from kernel.org. . .${ILRESTORE}"
sleep 1
# Format search an display.
KERN_LIST=$(wget -qO- https://www.kernel.org/pub/linux/kernel/v"$VER1".x/ | grep "linux-$VER1" | grep ".tar.xz" | sed -e 's:.*"linux-::' -e 's:.tar.xz.*$::' | sort -V | tail -n25)
# Error handling if version doesn't have any kernels.
if [[ "$KERN_LIST" = "" ]]; then
	echo "No kernels in list, re-run script."
	exit
fi

# Loop through each kernel in list and show on screen with numbered lines.
n=0
for i in $KERN_LIST; do
	let n=n+1
	echo "$n. $i"
done
Comment

# This function allows version number comparison.
function version_gt() { 
	test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; 
}

# Entire function here.
function kern_check() {
echo -e "${ILCOLOR2}"
# Set dirctory variables.
WORK_DIR="$HOME/tmp/kernel_build"
STOR_DIR="$HOME/tmp/kernel_storage"

# Change to dir and remove any old files
if [[ ! -d $HOME/tmp ]]; then
	mkdir $HOME/tmp
fi
cd $HOME/tmp
if [[ -d "$WORK_DIR" ]]; then
	rm -rf "$WORK_DIR"
fi

# Move to working directory
mkdir "$WORK_DIR"
if [[ ! -d $STOR_DIR ]]; then
	mkdir $STOR_DIR
fi
cd "$WORK_DIR"

<< Comment
# Version number to check for online. Ask if we want to keep or change it? This part will actually change it in the file here.
VER="4.20"
read -p "${ILRESTORE}Current kernel version in script is $VER, would you like to keep it[Y/n]? " YNVER
if [[ "$YNVER" =~ ^([yY][eE][sS]|[yY]|'')$ ]]; then	
	echo "OK, keeping current version of $VER"
else
	read -p "What verion would you like to change the script to(e.g. 4.16, 4.13, etc.)? " NEWVER
	sed -i "s:VER=\"$VER\":VER=\"$NEWVER\":g" $HOME/scripts/kernel_scripts/kernel-check
	$HOME/scripts/kernel_scripts/kernel-check && exit
fi
echo
Comment

echo
echo "${ILCOLOR2}We are going to see if there is a new kernel to build from main kernel source: kernel.org.${ILRESTORE}"
sleep 1

# Get and format websit info
GET=$(wget -qO- https://www.kernel.org | grep -A1  "latest_link\">" | grep "<a href=" | sed -e 's:<a href="::' | sed -e 's:">*::' | sed -e "s:tar.xz.*:tar.xz:" | sed "s/^[ \t]*//")
GET_VER=$(echo $GET | sed -e "s:.*linux-::" | sed -e "s:.tar.xz::")
<< Comment
GET=$(wget -qO- https://www.kernel.org/pub/linux/kernel/v"$VER1".x/ | grep "linux-$VER" | grep ".tar.xz" | sed -e 's:.*"linux-::' -e 's:.tar.xz.*$::' | sort -V | tail -n1)
Comment

echo
echo "Newest stable kernel version available is ${ILCOLOR2}$GET_VER${ILRESTORE}"
sleep 1

# Get current kernel version. The awk section here is nice in that everything after the '-' is deleted.
CURNT=$(ls /boot | grep "vmlinuz" | sed 's:vmlinuz-::g' | sed 's:-generic::g' | sort -V | tail -n1 | awk -F '\\-' '{print $1}')

echo "Latest kernel version installed is ${ILCOLOR2}$CURNT"
sleep 1
echo -e "${ILRESTORE}"



# Calling function to check versions.
if version_gt "$GET_VER" "$CURNT"; then
	# Added this because of automation this stops the screen for a response when called with the script kern-update-timer.
	if dialog --yesno "There is a newer kernel available.
You are running $CURNT, and $GET_VER is out.
Would you like to install it?" 10 50; then
		# Start timing process
		tm_wh_start=$(date +"%s")
		clear
		echo
		sleep 1
		# Formatting for web search.
		echo "${ILCOLOR2}Downloding latest kernel now. . .${ILRESTORE}"
		wget $GET
		#wget https://cdn.kernel.org/pub/linux/kernel/v"$VER1".x/linux-"$GET".tar.xz
		echo
		echo "${ILCOLOR2}Unzipping kernel. . .${ILRESTORE}"
		sleep 1
		tar -xf linux-"$GET_VER".tar.xz
		echo
		echo "${ILCOLOR2}Checking dependencies. . .${ILRESTORE}"
		echo 'spike' | sudo -S apt build-dep -y linux
		cd linux-"$GET_VER"
		echo
		echo "${ILCOLOR2}Copying current kernel .config. . .${ILRESTORE}"
		cp /boot/config-$(uname -r) .config
		echo
		echo "  ${ILCOLOR2}Append to Kernel Number for Local Version name. Current kernel: $(uname -r)${ILRESTORE}"
		CONF_VER=$(grep 'CONFIG_LOCALVERSION="' .config | cut -d'=' -f2 | sed 's:"::g')
		echo "Local version from .config file: $CONF_VER"
		echo
		read -p "  If current kernel already has a local version appended just leave blank. Copied .config file will already contain local version name.('Enter' for blank, or '0' to remove custom version number.)? " LOC_VER
		# If using kernel .config from local machine and it already has an appended version, this captures that appended version to add to initramfs update below, otherwise modules folder name will not match kernel name.		
		scripts/config --disable DEBUG_INFO

		if [[ "$LOC_VER" != "" ]]; then
			sed -i "s:CONFIG_LOCALVERSION=\".*:CONFIG_LOCALVERSION=\"-$LOC_VER\":g" .config
		fi
		if [[ "$LOC_VER" = "0" ]]; then
			sed -i "s:CONFIG_LOCALVERSION=.*:CONFIG_LOCALVERSION=\"\":g" .config
		fi
		# This variable is for initramfs update format below.
		CONF_VER_WRT=$(grep 'CONFIG_LOCALVERSION="' .config | cut -d'=' -f2 | sed 's:"::g')

		echo
		echo "${ILCOLOR2}Removing \"CONFIG_SYSTEM_TRUSTED_KEYS=\" from .config${ILRESTORE}"
		if grep -w "^CONFIG_SYSTEM_TRUSTED_KEYS=" .config; then
			sed -i 's:CONFIG_SYSTEM_TRUSTED_KEYS=:#CONFIG_SYSTEM_TRUSTED_KEYS=:g' .config
		fi
		# Build, remove uneeded files, install.
		# oldefconfig pulls current options from .config file and automatically answers new options without prompt.
		make olddefconfig		
		make -j `getconf _NPROCESSORS_ONLN` deb-pkg
		cd ..
		rm -rf *dbg*.deb
		rm -rf *libc*.deb
		echo 'spike' | sudo -S dpkg -i *.deb

		#Get .config version for next step.
		sudo update-initramfs -c -t -k "$GET_VER$CONF_VER_WRT"
		sudo update-grub

		# Build perf package
		export WORK_DIR="$WORK_DIR"
		export GET="$GET_VER"
		sleep 1
		echo
		echo "${ILCOLOR2}Now building perf package(Linux-tools). . .${ILRESTORE}"
		cp $HOME/scripts/kernel_scripts/perf-build $WORK_DIR/linux-$GET_VER/perf-build
		cd $WORK_DIR/linux-$GET_VER
		sed -i "s:VERSION=\"\":VERSION=\"$GET_VER\":g" perf-build		
		xterm -e "zsh -c \"cd $WORK_DIR/linux-$GET_VER; ./perf-build; echo; echo;\""
		cd ..
		sudo apt purge -y "linux-perf*"
		sudo dpkg -i --force-all $HOME/tmp/perf-package/*.deb
		if ls $HOME/tmp/perf-package/*.deb >/dev/null 2>&1; then
			cp $HOME/tmp/perf-package/*.deb $HOME/tmp/kernel_storage
		fi
		if [[ -d $HOME/tmp/perf-package ]]; then
			rm -rf $HOME/tmp/perf-package
		fi
		
		# End timing process
		tm_wh_end=$(date +"%s")
		tm_wh_diff=$(( $tm_wh_end - $tm_wh_start))
		echo
		echo "${ILCOLOR2}It took $(($tm_wh_diff / 3600 )) hours $((($tm_wh_diff % 3600) / 60)) minutes $(($tm_wh_diff % 60)) seconds to run whole process.${ILRESTORE}"

		# Reboot to new kernel?
		YNRBT="y"
		read -p "Would you like to reboot to new kernel now?[Y/n] " YNRBT
		echo
		if [[ "$YNRBT" =~ ^([yY][eE][sS]|[yY])$ ]]; then
			cd ..
			# Create kernel storage directory if doesn't exist, for storage of previously built kernels.
			if [[ ! -d $STOR_DIR ]]; then
				mkdir $STOR_DIR
			fi
			# Error handling if directory exists but is empty. Using ls instead of [[ -f ]] for wildcards.
			if [[ $(ls $STOR_DIR) ]]; then
				ls $STOR_DIR/* -t | tail -n +22 | xargs rm -f
			fi
			# Clean up.
			if [[ -d "$WORK_DIR" ]]; then
				if ls $WORK_DIR/*.deb > /dev/null 2>&1; then
					cp $WORK_DIR/*.deb $STOR_DIR
				fi
				rm -rf "$WORK_DIR"
			fi
			cd $HOME
			echo 'spike' | sudo -S reboot
		else
			echo "Ok, not rebooting now."
			echo
			sleep 1
		fi
	else
		clear
		echo "${ILCOLOR2}Ok, not installing now, re-run script to install latest kernel.${ILRESTORE}"
		echo
		sleep 3
	fi
else
	echo "${ILCOLOR2}You already have the latest kernel.${ILRESTORE}"
	echo
	sleep 2
fi
cd ..
# Create kernel storage directory if doesn't exist, for storage of previously built kernels.
if [[ ! -d $STOR_DIR ]]; then
	mkdir $STOR_DIR
fi
# Error handling if directory exists but is empty. Using ls instead of [[ -f ]] for wildcards.
if [[ $(ls $STOR_DIR) ]]; then
	ls $STOR_DIR/* -t | tail -n +22 | xargs rm -f
fi
# Clean up.
if [[ -d "$WORK_DIR" ]]; then
	if ls $WORK_DIR/*.deb > /dev/null 2>&1; then
		cp $WORK_DIR/*.deb $STOR_DIR
	fi
	rm -rf "$WORK_DIR"
fi
cd $HOME
}
# Run main function.
kern_check
