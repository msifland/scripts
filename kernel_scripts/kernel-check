#!/bin/bash
# This is a blank bash script document.
# Put your code below this line.
# Set kernel version prefix number to look for. If changed then rerun script with new version number inserted and saved in this file.

# This function allows version number comparison used below.
function version_gt() { 
	test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; 
}

# Entire function here.
function kern_check() {
echo -e "${ILCOLOR2}"

# Set dirctory variables.
WORK_DIR="$HOME/tmp/kernel_build"
STOR_DIR="$HOME/tmp/kernel_storage"

# Change to dir and remove any old files
if [[ ! -d $HOME/tmp ]]; then
	mkdir $HOME/tmp
fi
cd $HOME/tmp
if [[ -d "$WORK_DIR" ]]; then
	rm -rf "$WORK_DIR"
fi

# Move to working directory
mkdir "$WORK_DIR"
if [[ ! -d $STOR_DIR ]]; then
	mkdir $STOR_DIR
fi
cd "$WORK_DIR"

echo
echo "${ILCOLOR2}We are going to see if there is a new kernel to build from main kernel source: kernel.org.${ILRESTORE}"
sleep 1

# Get and format websit info. Grepping "latest_link" is in page source for latest download. The rest is of this is for formatting.
GET=$(wget -qO- https://www.kernel.org | grep -A1  "latest_link\">" | grep "<a href=" | sed -e 's:<a href="::' | sed -e 's:">*::' | sed -e "s:tar.xz.*:tar.xz:" | sed "s/^[ \t]*//")
GET_VER=$(echo $GET | sed -e "s:.*linux-::" | sed -e "s:.tar.xz::")

echo
echo "Newest stable kernel version available is ${ILCOLOR2}$GET_VER${ILRESTORE}"
sleep 1

# Get current kernel version. The awk section here is nice in that everything after the '-' is deleted.
CURNT=$(ls /boot | grep "vmlinuz" | sed 's:vmlinuz-::g' | sed 's:-generic::g' | sort -V | tail -n1 | awk -F '\\-' '{print $1}')

echo "Latest kernel version installed is ${ILCOLOR2}$CURNT"
sleep 1
echo -e "${ILRESTORE}"

# Calling function to check versions.
if version_gt "$GET_VER" "$CURNT"; then
	# Added this because of automation this stops the screen for a response when called with the script kern-update-timer.
	# Start timing process
	tm_wh_start=$(date +"%s")
	clear

	echo
	sleep 1
	# Formatting for web search.
	echo "${ILCOLOR2}Downloding latest kernel now. . .${ILRESTORE}"
	wget $GET
	echo

	echo "${ILCOLOR2}Unzipping kernel. . .${ILRESTORE}"
	sleep 1
	tar -xf linux-"$GET_VER".tar.xz
	echo

	echo "${ILCOLOR2}Checking dependencies. . .${ILRESTORE}"
	echo 'spike' | sudo -S apt build-dep -y linux
	if ! dpkg --get-selections | awk '{print $1}' | grep -xq "ncurses-dev"; then
		echo
		echo "ncurses-dev not found, installing now. . ."
		sleep 1
		echo "spike" | sudo -S apt install -y ncurses-dev
	fi
	if ! dpkg --get-selections | awk '{print $1}' | grep -xq "fakeroot"; then
		echo
		echo "fakeroot not found, installing now. . ."
		sleep 1
		echo "spike" | sudo -S apt install -y fakeroot
	fi
	
	cd linux-"$GET_VER"
	echo

	CURR_STAB=$(ls /boot | grep "config" | sort -g | head -1)
	echo "${ILCOLOR2}Copying current STABLE kernel - ${ILRESTORE}$CURR_STAB. . ."
	cp /boot/$CURR_STAB .config
	echo

	scripts/config --disable DEBUG_INFO
	echo "${ILCOLOR2}Appending '-msi' to kernel version to show as custom built kernel."
	# This is local version appended to kernel
	LOC_VER="-msi"
	echo "sed -i \"/CONFIG_LOCALVERSION=/c\CONFIG_LOCALVERSION=\"$LOC_VER\"" .config
	sed -i "/CONFIG_LOCALVERSION=/c\CONFIG_LOCALVERSION=\"$LOC_VER\"" .config
	sleep 1

	echo
	echo "${ILCOLOR2}Removing \"CONFIG_SYSTEM_TRUSTED_KEYS=\" from .config${ILRESTORE}"
	if grep -w "^CONFIG_SYSTEM_TRUSTED_KEYS=" .config; then
		sed -i 's:CONFIG_SYSTEM_TRUSTED_KEYS=:#CONFIG_SYSTEM_TRUSTED_KEYS=:g' .config
	fi

	# Command 'oldefconfig' pulls current options from .config file and automatically answers new options without prompt.
	make olddefconfig
	#make menuconfig
	make -j `getconf _NPROCESSORS_ONLN` deb-pkg
	echo 'spike' | sudo -S make modules_install

	# This variable is here before we change out of this directory, for initramfs update format below.
	CONF_VER_WRT=$(grep 'CONFIG_LOCALVERSION="' .config | cut -d'=' -f2 | sed 's:"::g')

	# Installing kernel and updateing grub and initramfs
	cd ..
	echo 'spike' | sudo -S dpkg -i *.deb
	echo 'spike' | sudo -S update-initramfs -c -t -k "$GET_VER$CONF_VER_WRT"
	echo 'spike' | sudo -S update-grub		
	sleep 1

	# End timing process
	tm_wh_end=$(date +"%s")
	tm_wh_diff=$(( $tm_wh_end - $tm_wh_start))
	echo
	echo "${ILCOLOR2}It took $(($tm_wh_diff / 3600 )) hours $((($tm_wh_diff % 3600) / 60)) minutes $(($tm_wh_diff % 60)) seconds to run whole process.${ILRESTORE}"
	sleep 1
	# This section is for if you are using nvidia drivers.
	# Build nvidia-kernel at boot
	if ! dpkg --get-selections | awk '{print $1}' | grep -wq "module-assistant"; then
		echo 'spike' | sudo -S apt -y install module-assistant
	fi
	echo
	echo "On reboot, nvidia drivers will be built and installed." 
	# If using nvidia drivers.
	$HOME/scripts/kernel_scripts/nvidia-build
	$HOME/scripts/kernel_scripts/get-kernel-firmware
	
	# Reboot to new kernel
	cd ..
	# Create kernel storage directory if doesn't exist, for storage of previously built kernels.
	if [[ ! -d $STOR_DIR ]]; then
		mkdir $STOR_DIR
	fi

	# Error handling if directory exists but is empty. Using ls instead of [[ -f ]] for wildcards.
	if [[ $(ls $STOR_DIR) ]]; then
		ls $STOR_DIR/* -t | tail -n +22 | xargs rm -f
	fi

	# Clean up.
	if [[ -d "$WORK_DIR" ]]; then
		if ls $WORK_DIR/*.deb > /dev/null 2>&1; then
			cp $WORK_DIR/*.deb $STOR_DIR
		fi
		rm -rf "$WORK_DIR"
	fi
		cd $HOME
		echo 'spike' | sudo -S shutdown -r now
else
	echo "${ILCOLOR2}You already have the latest kernel.${ILRESTORE}"
	echo
	sleep 2
fi
cd ..

# Create kernel storage directory if doesn't exist, for storage of previously built kernels.
if [[ ! -d $STOR_DIR ]]; then
	mkdir $STOR_DIR
fi

# Error handling if directory exists but is empty. Using ls instead of [[ -f ]] for wildcards.
if [[ $(ls $STOR_DIR) ]]; then
	ls $STOR_DIR/* -t | tail -n +22 | xargs rm -f
fi

# Clean up.
if [[ -d "$WORK_DIR" ]]; then
	if ls $WORK_DIR/*.deb > /dev/null 2>&1; then
		cp $WORK_DIR/*.deb $STOR_DIR
	fi
	rm -rf "$WORK_DIR"
fi
cd $HOME
}

# Run main function.
kern_check
