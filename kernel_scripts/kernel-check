#!/bin/bash
# This is a blank bash script document.
# Put your code below this line.
# Set kernel version number to look for.
ver1="4"
read -p "Current kernel version in script is $ver1, would you like to keep it[Y/n]? " ynver
if [[ "$ynver" =~ ^([yY][eE][sS]|[yY]|'')$ ]]; then	
	echo "OK, keeping current version of $ver1"
else
	read -p "What verion would you like to change the script to(e.g. 4, 5, etc.)? " newver
	sed -i "s:ver=\"$ver1\":ver=\"$newver\":g" $HOME/scripts/kernel_scripts/kernel-build
	$HOME/scripts/kernel_scripts/kernel-build-check && exit
fi
echo

echo "${ILCOLOR2}Here are the 25 lastest available kernels from kernel.org. . .${ILRESTORE}"
sleep 3

kern_list=$(wget -qO- https://www.kernel.org/pub/linux/kernel/v"$ver1".x/ | grep "linux-$ver1" | grep ".tar.xz" | sed -e 's:.*"linux-::' -e 's:.tar.xz.*$::' | sort -V | tail -n25)
# Loop to list the kernels on numbered lines and echo them on screen.
n=0
for i in $kern_list; do
	let n=n+1
	echo "$n. $i"
done

# This function allows version number comparison.
function version_gt() { 
	test "$(printf '%s\n' "$@" | sort -V | head -n 1)" != "$1"; 
}

# Entire function here.
function kern_check() {
echo -e "${ILCOLOR2}"
work_dir="$HOME/tmp/kernel-build"

# Change to dir and remove any old files
if [[ ! -d $HOME/tmp ]]; then
	mkdir $HOME/tmp
fi
cd $HOME/tmp
if [[ -d kernel-build ]]; then
	rm -rf kernel-build
fi

# Move to working directory
mkdir "$work_dir"
cd "$work_dir"

# Version number to check for online. Ask if we want to keep or change it? This part will actually change it in the file here.
ver="4.18"
read -p "${ILRESTORE}Current kernel version in script is $ver, would you like to keep it[Y/n]? " ynver
if [[ "$ynver" =~ ^([yY][eE][sS]|[yY]|'')$ ]]; then	
	echo "OK, keeping current version of $ver"
else
	read -p "What verion would you like to change the script to(e.g. 4.16, 4.13, etc.)? " newver
	sed -i "s:ver=\"$ver\":ver=\"$newver\":g" $HOME/scripts/kernel_scripts/kernel-build-check
	$HOME/scripts/kernel_scripts/kernel-build-check && exit
fi
echo

echo
echo "${ILCOLOR2}We are going to see if there is a new kernel to build from main kernel source: kernel.org.${ILRESTORE}"
sleep 1

# Get and format websit info
get=$(wget -qO- https://www.kernel.org/pub/linux/kernel/v4.x/ | grep "linux-$ver" | grep ".tar.xz" | sed -e 's:.*"linux-::' -e 's:.tar.xz.*$::' | sort -V | tail -n1)

echo
echo "Newest kernel version available is $get"
sleep 1

# Get current kernel version. The awk section here is nice in that everything after the '-' is deleted.
curnt=$(ls /boot | grep "vmlinuz" | sed 's:vmlinuz-::g' | sed 's:-generic::g' | sort -V | tail -n1 | awk -F '\\-' '{print $1}')

echo "Latest kernel version installed is $curnt"
sleep 1
echo -e "${ILRESTORE}"

# Calling function to check versions.
if version_gt "$get" "$curnt"; then
	# Added this because of automation this stops the screen for a response when called with the script kern-update-timer.
	if dialog --yesno "There is a newer kernel available.
You are running $curnt, and $get is out.
Would you like to install it?" 10 50; then
		# Start timing process
		tm_wh_start=$(date +"%s")
		clear
		echo
		sleep 1
		# Formatting for web search.
		echo "${ILCOLOR2}Downloding latest kernel now. . .${ILRESTORE}"
		wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-"$get".tar.xz
		echo
		echo "${ILCOLOR2}Unzipping kernel. . .${ILRESTORE}"
		sleep 1
		echo
		echo "${ILCOLOR2}Checking dependencies. . .${ILRESTORE}"
		echo 'spike' | sudo -S apt build-dep -y linux
		tar -xf linux-"$get".tar.xz
		cd linux-"$get"
		echo
		echo "${ILCOLOR2}Copying current kernel .config. . .${ILRESTORE}"
		cp /boot/config-$(uname -r) .config
		echo
		echo "  ${ILCOLOR2}Append to Kernel Number for Local Version name. Current kernel: $(uname -r)${ILRESTORE}"
		echo
		read -p "  If current kernel already has a local version appended just leave blank. Copied .config file will already contain local version name.('Enter' for blank)? " loc_ver
		# If using kernel .config from local machine and it already has an appended version, this captures that appended version to add to initramfs update below, otherwise modules folder name will not match kernel name.
		CONF_VER=$(grep 'CONFIG_LOCALVERSION="' .config | cut -d'=' -f2 | sed 's:"::g')
		scripts/config --disable DEBUG_INFO
		# Build.
		make -j `getconf _NPROCESSORS_ONLN` deb-pkg LOCALVERSION="$loc_ver"
		cd ..
		rm -rf *dbg*.deb
		rm -rf *libc*.deb
		echo 'spike' | sudo -S dpkg -i *.deb
		UPD_INIT=$(echo $for_inst | sed 's:linux-::g')
		sudo update-initramfs -c -t -k "$UPD_INIT$CONF_VER$loc_ver"
		sudo update-grub

		# End timing process
		tm_wh_end=$(date +"%s")
		tm_wh_diff=$(( $tm_wh_end - $tm_wh_start))
		echo
		echo "${ILCOLOR2}It took $(($tm_wh_diff / 3600 )) hours $((($tm_wh_diff % 3600) / 60)) minutes $(($tm_wh_diff % 60)) seconds to run whole process.${ILRESTORE}"

		# Purge old kernels?
		read -p "Would you like to reboot to new kernel now?[y/n] " ynprg
		echo
		if [[ "$ynprg" =~ ^([yY][eE][sS]|[yY])$ ]]; then
			echo 'spike' | sudo -S $HOME/scripts/kernel_scripts/kernel-purge
		else
			echo "Ok, not rebooting now."
			echo
			sleep 1
		fi
	else
		clear
		echo "${ILCOLOR2}Ok, not installing now, re-run script to install latest kernel.${ILRESTORE}"
		echo
		sleep 3
	fi
else
	echo "${ILCOLOR2}You already have the latest kernel.${ILRESTORE}"
	echo
	sleep 3
fi
#Clean up.
cd ..
rm -rf $HOME/tmp/kernel-build
cd $HOME
}

kern_check
