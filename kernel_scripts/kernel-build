#!/bin/bash
# This is a blank bash script document.
# Put your code below this line.
# Removing old files and creating new ones.

# Change to dir and remove any old files


if [[ ! -d $HOME/tmp ]]; then
	mkdir $HOME/tmp
fi
cd $HOME/tmp

if [[ -d kernel-build ]]; then
	rm -rf kernel-build
fi
if [[ -f *.tar.xz ]]; then
	rm -rf *.tar.xz
fi

mkdir $HOME/tmp/kernel-build
work_dir="$HOME/tmp/kernel-build"
cd $work_dir

rm -fr $HOME/tmp/*.deb
rm -rf $HOME/tmp/*.deb.*
echo
kern_file=$HOME/tmp/kern_file

if [[ ! -f $kern_file ]]; then
	touch $kern_file
fi
echo "" > $kern_file

ver="4"
read -p "Current kernel version in script is $ver, would you like to keep it[Y/n]? " ynver
if [[ "$ynver" =~ ^([yY][eE][sS]|[yY]|'')$ ]]; then	
	echo "OK, keeping current version of $ver"
else
	read -p "What verion would you like to change the script to(e.g. 4, 5, etc.)? " newver
	sed -i "s:ver=\"$ver\":ver=\"$newver\":g" $HOME/scripts/kernel_scripts/kernel-build
	$HOME/scripts/kernel_scripts/kernel-build && exit
fi
echo

# Searching website for versions available and showing the last 30. Also figured out after trial and error that the brackets had to be escaped.
#kern_list=$(wget -qO- http://kernel.ubuntu.com/\~kernel-ppa/mainline/ | grep "v4." | sed 's:<tr><td valign="top"><img src="/icons/folder.gif" alt="\[DIR\]"></td><td><a href="::g' | awk -F '\\/">' '{print $1}' | tail -n20)
echo "${ILCOLOR2}Here are the 50 lastest available kernels from kernel.org. . .${ILRESTORE}"
sleep 3

kern_list=$(wget -qO- https://www.kernel.org/pub/linux/kernel/v"$ver".x/ | grep "linux-$ver" | grep ".tar.xz" | sed -e 's:.*"linux-::' -e 's:.tar.xz.*$::' | sort -V | tail -n50)

# Loop to list the kernels in the file on numbered lines and echo them on screen.
n=0
for i in $kern_list; do
	let n=n+1
	echo "$n. $i" >> $kern_file
	echo "$n. $i"
done

# Get kernel name without extra numbers at the end. The awk section here is nice in that everything after the '-' is deleted.
rnning=$(uname -r | awk -F '\\-' '{print $1}')
echo "${ILCOLOR2}-----> Currently running $rnning" | pv -qL 50
sleep 1

function install_kern(){
# Ask to select line numbers for install
echo
read -p "Type the line number of the kernel you want to install(Type 0 to exit): " inst
sleep 1
if [[ "$inst" = "0" ]]; then
	# Remove old files.
	rm -rf $kern_file
	rm -fr $HOME/tmp/*.deb
	rm -rf $HOME/tmp/*.deb.*
	rm -rf $HOME/tmp/*.tar.xz
	if [[ -d $HOME/tmp/kernel-build ]]; then
		rm -rf $HOME/tmp/kernel-build
	fi
	exit
fi

# Format for web search purposes.
for_inst=$(grep "^$inst. " $kern_file | sed "s:$inst. ::g")
echo $for_inst
cd $work_dir
if test $for_inst; then
	tm_wh_start=$(date +"%s")
		clear
		echo
		sleep 1
		# Formatting for web search.
		echo "${ILCOLOR2}Downloding latest kernel now. . .${ILRESTORE}"
		wget https://cdn.kernel.org/pub/linux/kernel/v"$ver".x/linux-"$for_inst".tar.xz 
		echo
		echo "${ILCOLOR2}Unzipping kernel and building now, this will take a while. . .${ILRESTORE}"
		sleep 1
		echo
		echo "${ILCOLOR2}Checking dependencies. . .${ILRESTORE}"
		echo 'spike' | sudo -S apt build-dep -y linux-image-$(uname -r)
		tar -xf linux-"$for_inst".tar.xz
		cd linux-"$for_inst"
		cp /boot/config-$(uname -r) .config
		read -p "What would you like to append to Kernel Number for Local Version name('Enter' for blank)? " loc_ver
		make -j `getconf _NPROCESSORS_ONLN` deb-pkg LOCALVERSION="$loc_ver"
		cd ..
		rm -rf *dbg*.deb
		rm -rf *libc*.deb
		echo 'spike' | sudo -S dpkg -i *.deb
		# End timing process
		tm_wh_end=$(date +"%s")
		tm_wh_diff=$(( $tm_wh_end - $tm_wh_start))
		echo
		echo "${ILCOLOR2}It took $(($tm_wh_diff / 3600 )) hours $((($tm_wh_diff % 3600) / 60)) minutes $(($tm_wh_diff % 60)) seconds to run whole process.${ILRESTORE}"
else
	echo
	echo "Invalid entry, try again. . ."
	sleep 1
	install_kern
fi
}
install_kern
# Remove old files.
rm -rf $kern_file
	rm -rf $kern_file
	rm -fr $HOME/tmp/*.deb
	rm -rf $HOME/tmp/*.deb.*
	rm -rf $HOME/tmp/*.tar.xz
	if [[ -d $HOME/tmp/kernel-build ]]; then
		rm -rf $HOME/tmp/kernel-build
	fi
