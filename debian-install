#!/bin/bash
# This is a blank bash script document.
# Put your code below this line.
# Check if script has been run as root.
if [[ ! "$USER" = "root" ]]; then
	echo "This script must be run as root!"
	exit
fi
echo $(date +%m-%d-%Y) $(date +"%r")
tm_wh_start=$(date +"%s")
sleep 1
echo
echo
echo "This script is set up to install Debian Mate. So be sure to select Debian Desktop Env. and Mate Desktop when this time comes, along with any other various packages."
echo
sleep 1

echo "Running script wipe-partition. If you wish to bypass type 'n'."
echo
sleep 1
$HOME/scripts/wipe-partition
if [[ -d /mnt/deb-inst ]]; then
	echo
	echo "Removing previous install directory /mnt/deb-inst. . ."
	echo
	sleep 1
	rm -rf /mnt/deb-inst
fi

echo
echo "Making directories. . ."
echo
sleep 1
cd /
if [[ ! -d /mnt ]]; then
	mkdir /mnt
fi
if [[ ! -d /mnt/deb-inst ]]; then
	mkdir /mnt/deb-inst
fi
if [[ ! -d /mnt/deb-inst/work ]]; then
	mkdir /mnt/deb-inst/work
fi
cd /mnt/deb-inst/work

echo
echo "Downloading debootstrap. . ."
echo
sleep 1
DEBOOT_STRP=$(wget -qO- http://ftp.debian.org/debian/pool/main/d/debootstrap | grep "all.deb" | sort -V | tail -1 | sed -e 's:.*a href="::' -e 's:.>.*::' )
wget http://ftp.debian.org/debian/pool/main/d/debootstrap/"$DEBOOT_STRP"

cd /
dpkg -i /mnt/deb-inst/work/*.deb

echo
lsblk
echo
read -p "Enter partition to configure with cfdisk. Configure partition type to dos.(ex. /dev/sdb). " part_conf
sleep 1
for blk in $(df -h | grep "$part_conf" | awk '{ print $1 }'); do
	sudo umount $blk
done
cfdisk $part_conf
echo
lsblk
echo
echo "Now you need to format earch partition as ext4. A new terminal will open and for this."
sleep 5
/usr/bin/mate-terminal -e "bash -c \"echo; echo 'For each partition type: mkfs -t ext4 -L \"label\" /dev/sdXY.

Then type exit to close the terminal and continue the install process. You may have to umount drives to continue'; echo; lsblk; echo; echo; sh\""
echo

lsblk
echo
read -p "Enter the partition name to install to(ex. /dev/sdb1): " part_name
sleep 1
umount $part_name
umount $part_conf
mount $part_name /mnt/deb-inst

debootstrap --arch amd64 testing /mnt/deb-inst http://ftp.us.debian.org/debian/
echo
echo "Mounting system folders and copying /etc files for internet connection. . ."
echo
sleep 1
mount -t proc /proc /mnt/deb-inst/proc
mount -t sysfs /sys /mnt/deb-inst/sys
mount -o bind /dev /mnt/deb-inst/dev
mount -o bind /dev/pts /mnt/deb-inst/dev/pts
cp /etc/network/interfaces /mnt/deb-inst/etc/network/interfaces
cp /etc/resolv.conf /mnt/deb-inst/etc/resolv.conf
cp /etc/hosts /mnt/deb-inst/etc/hosts
cp /etc/hostname /mnt/deb-inst/etc/hostname
cp /etc/apt/sources.list /mnt/deb-inst/etc/apt/sources.list
nano /mnt/deb-inst/etc/apt/sources.list
cp /home/msifland/scripts/debian-install-continue /mnt/deb-inst/debian-install-continue

echo
echo "Chroot'ing into new install to finish the process. . ."
echo
sleep 1
part_name="$part_name"
cat << EOF | part_name=$part_name chroot /mnt/deb-inst env /bin/bash
source /debian-install-continue
EOF
sudo rm -rf /mnt/deb-inst/debian-install-continue
sudo nano /mnt/deb-inst/etc/apt/sources.list

echo
read -p "Did you use a separate /home or other partition[y/n]? " sep_hm
sleep 1
if [[ $sep_hm =~ ^([yY][eE][sS]|[yY])$ ]]; then
	echo
	read -p "Enter each partition separated by a space(ex. home boot var tmp, etc.) " parts
	parts_arr=($parts)
	for part in "${parts_arr[@]}"; do
		echo
		read -p "What partition for $part(ex. /dev/sdb2)? " new_prt
		if [[ ! -d /mnt/deb-inst/temp ]]; then
			sudo mkdir /mnt/deb-inst/temp
		fi
		sudo mkdir /mnt/deb-inst/temp/$part
		sudo mount $new_prt /mnt/deb-inst/temp/$part
		sudo cp -rf /mnt/deb-inst/$part/* /mnt/deb-inst/temp/$part/
		sudo rm -rf /mnt/deb-inst/$part/*
		sudo umount /mnt/deb-inst/temp/$part
		sudo mount $new_prt /mnt/deb-inst/$part
		echo "$part created. . ."
		echo
		echo "Putting entry $part into /etc/fstab. . ."
		fstab_entry=$(sudo blkid -s UUID | grep "$new_prt" | sed -e 's#.*: ##' | sed 's:"::g')
		echo "" | sudo tee -a /mnt/deb-inst/etc/fstab > /dev/null
		echo "$fstab_entry    /$part    ext4    defaults    0    2" | sudo tee -a /mnt/deb-inst/etc/fstab > /dev/null
		sleep 1
	done
	sudo rm -rf /mnt/deb-inst/temp
fi

echo
read -p "Opening /etc/fstab to review and manually make changes. Showing you the UUID's for any partitions to add, eg. /home, /boot, /tmp, etc. Be sure to remove the \" after 'UUID='. All partition formatting should be pretty much the same, with the exception of the last number. Root partition should be a '1', others should be a '2'.(Press [ENTER] to continue) "
echo
echo
sudo blkid
/usr/bin/mate-terminal -e "bash -c \"sudo nano /mnt/deb-inst/etc/fstab\""
echo

<<com
echo
grb_inst=$(echo "${part_name%?}")
echo "Debian install was to $part_name.Installing grub to $grb_inst. . ."
sudo grub-install $grb_inst
sudo update-grub $grb_inst
com

echo
usrnme=$(</mnt/deb-inst/usrnme.txt)
rm -rf /mnt/deb-inst/usrnme.txt usrnme_psswrd.txt new_psswrd.txt
echo "Username is $usrnme"
read -p "Would you like to install you personal files for this installation[y/n]? " per_fls
sleep 1
if [[ "$per_fls" =~ ^([yY][eE][sS]|[yY])$ ]]; then
	echo "Copying user files from current system to new system. . ."
	cp -rf $HOME/Documents /mnt/deb-inst/home/$usrnme/
	cp -rf $HOME/"Modules&Apps" /mnt/deb-inst/home/$usrnme/
	cp -rf $HOME/pkg_bkups /mnt/deb-inst/home/$usrnme/
	cp -rf $HOME/Projects /mnt/deb-inst/home/$usrnme/
	cp -rf $HOME/scripts /mnt/deb-inst/home/$usrnme/
	cp -rf $HOME/.oh-my-zsh /mnt/deb-inst/home/$usrnme/
	cp -rf $HOME/.config /mnt/deb-inst/home/$usrnme/
	cp -rf $HOME/.local /mnt/deb-inst/home/$usrnme/
	cp -rf $HOME/.cache /mnt/deb-inst/home/$usrnme/
	echo "Files copied. You may want to delete select autostart files from .config/autostart."
	sleep 2
fi

echo
read -p "Would you like to copy your personal bash, zsh and conky files for this installation[y/n]? " cpy_sh
if [[ "$cpy_sh" =~ ^([yY][eE][sS]|[yY])$ ]]; then
	echo "Copying these files now. . ."
	sleep 1
    cp -rf $HOME/.conkyrc /mnt/deb-inst/home/$usrnme/
	cp -rf $HOME/.zshrc /mnt/deb-inst/home/$usrnme/
	cp -rf $HOME/.bashrc /mnt/deb-inst/home/$usrnme/
fi
sleep 1
echo
read -p "Would you like to change default shell from bash to zsh[y/n]? " def_shell
if [[ "$def_shell" =~ ^([yY][eE][sS]|[yY])$ ]]; then
	sed -i 's:bash:zsh:g' /mnt/deb-inst/etc/passwd
fi
sleep 1

echo
echo "Making sure ownership is correct on all newly copied files. . ."
sudo chown -R $usrnme:$usrnme /mnt/deb-inst/home/*
sleep 1

echo
echo "Chroot'ing back in to update grub and anything else you need. Type 'exit' when done. . ."
echo
sleep 1
grb_inst=$(echo "${part_name%?}")
grb_inst=$grb_inst
sudo chroot /mnt/deb-inst env /bin/sh -c "echo; grub-install $grb_inst; echo; update-grub; echo; sh"
echo
sleep 1

echo
read -p "Pausing in case you missed something. You can open a new termianl and chroot back into enviroment /mnt/deb-inst and finish up. Press [ENTER] to finish the process."
echo
sleep 1

echo
echo "Attempting to umount devices and system files. . ."
echo
sleep 1
sudo umount /mnt/deb-inst/proc
sudo umount /mnt/deb-inst/sys
sudo umount /mnt/deb-inst/dev/pts
sudo umount /mnt/deb-inst/dev
sudo umount /mnt/deb-inst

echo
echo "All done."
echo
sleep 1
echo $(date +%m-%d-%Y) $(date +"%r")
tm_wh_end=$(date +"%s")
tm_wh_diff=$(( $tm_wh_end - $tm_wh_start))
echo "It took $((($tm_wh_diff % 3600) / 60)) minutes $(($tm_wh_diff % 60)) seconds to run whole process."
exit
