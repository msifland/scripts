#!/bin/bash
# This is a blank bash script document.
# Put your code below this line.
# Check if script has been run as root.
if [[ ! "$USER" = "root" ]]; then
	echo "This script must be run as root!"
	exit
fi

INST_PTH="/mnt/deb-inst"
echo
echo
echo "This script is set up to install Debian Mate. So be sure to select Mate Desktop when this time comes, along with any other various packages."
echo
sleep 1

sudo umount -a
sudo umount $INST_PTH/proc
sudo umount $INST_PTH/sys
sudo umount $INST_PTH/dev/pts
sudo umount $INST_PTH/dev
sudo umount $INST_PTH
sleep 1

if [[ -d $INST_PTH ]]; then
	echo
	echo "Removing previous install directory $INST_PTH. . ."
	echo
	sleep 1
	sudo rm -rf $INST_PTH
fi

echo
echo "Creating work directories. . ."
echo
sleep 1
cd /
if [[ ! -d /mnt ]]; then
	mkdir /mnt
fi
if [[ ! -d $INST_PTH ]]; then
	mkdir $INST_PTH
fi
if [[ ! -d $INST_PTH/work ]]; then
	mkdir $INST_PTH/work
fi
cd $INST_PTH/work

echo
echo "Downloading debootstrap. . ."
echo
sleep 1
DEBOOT_STRP=$(wget -qO- http://ftp.debian.org/debian/pool/main/d/debootstrap | grep "all.deb" | sort -V | tail -1 | sed -e 's:.*a href="::' -e 's:.>.*::' )
wget http://ftp.debian.org/debian/pool/main/d/debootstrap/"$DEBOOT_STRP"

cd /
dpkg -i $INST_PTH/work/*.deb

echo
lsblk
echo
read -p "Enter main partition block to configure for installation.(ex. /dev/sdb). " part_conf
sleep 1
for blk in $(df -h | grep "$part_conf" | awk '{ print $1 }'); do
	sudo umount $blk
done
echo

read -p "Would you like to completely wipe $part_conf first[y/n] " wipe_part
if [[ "$wipe_part" =~ ^([yY][eE][sS]|[yY])$ ]]; then
	dd if=/dev/zero of="$part_conf"  bs=512  count=1
	echo "Device wiped succesfully."
else
	echo "	Not wiping."
fi
sleep 1

echo
read -p "Moving on to cfdisk to create and configure patitions. If creating separate boot partition it should be a minimum of 500M. Root partition should be minimun of 20G and the rest for home partition. Be sure to configure to 'dos'. Press [ENTER] to continue."
sleep 1
cfdisk $part_conf
echo

lsblk
echo
echo "Now you need to format earch partition as ext4. A new terminal will open and for this."
sleep 5
/usr/bin/xterm -e "bash -c \"echo; echo 'For each partition type: 
	mkfs -t ext4 -L \"label\" /dev/sdXY. (You may have to unmount first)

Then type exit to close the terminal and continue the install process.'; echo; lsblk; echo; echo; sh\""
echo

lsblk
echo
read -p "Enter the partition in which to install the Debian root file system(ex. /dev/sdb2): " part_name
sleep 1
umount $part_name
umount $part_conf
mount $part_name $INST_PTH
debootstrap --arch amd64 testing $INST_PTH http://ftp.us.debian.org/debian/

echo
echo "Mounting system folders and copying /etc files for internet connection. . ."
echo
sleep 1
mount -t proc /proc $INST_PTH/proc
mount -t sysfs /sys $INST_PTH/sys
mount -o bind /dev $INST_PTH/dev
mount -o bind /dev/pts $INST_PTH/dev/pts
cp /etc/network/interfaces $INST_PTH/etc/network/interfaces
cp /etc/resolv.conf $INST_PTH/etc/resolv.conf
cp /etc/hosts $INST_PTH/etc/hosts
cp /etc/hostname $INST_PTH/etc/hostname
cp /etc/apt/sources.list $INST_PTH/etc/apt/sources.list
nano $INST_PTH/etc/apt/sources.list
cp /home/msifland/scripts/debian-install-continue $INST_PTH/debian-install-continue

echo
echo "Chroot'ing into new install to finish the process. . ."
echo
sleep 1
cat << EOF | part_name="$part_name" chroot $INST_PTH env /bin/bash
source /debian-install-continue
EOF
sudo rm -rf $INST_PTH/debian-install-continue
sudo nano $INST_PTH/etc/apt/sources.list

echo
sudo blkid
echo

function separate_parts(){
	lsblk
	echo
	read -p "This function will loop over until you leave this field blank.
It is very important that you type these entries correctly in this section.

Enter single partition name. (ex. home boot var tmp, etc.): " part
	echo
	if [[ ! $part = "" ]]; then
		read -p "What partition for $part(ex. /dev/sdb3)? " new_prt
		if [[ ! -d $INST_PTH/temp ]]; then
			sudo mkdir $INST_PTH/temp
		fi
		sudo mkdir $INST_PTH/temp/$part
		sudo mount $new_prt $INST_PTH/temp/$part
		if [[ ! -d $INST_PTH/$part ]]; then
			sudo mkdir $INST_PTH/$part
		fi
		if [[ ! -d $INST_PTH/$part ]]; then
			sudo mkdir $INST_PTH/$part
		fi
		sudo cp -rf $INST_PTH/$part/* $INST_PTH/temp/$part/
		sudo rm -rf $INST_PTH/$part/*
		sudo umount $INST_PTH/temp/$part
		sudo mount $new_prt $INST_PTH/$part
		echo "$part created. . ."
		echo
		echo "Putting entry $part into /etc/fstab. . ."
		fstab_entry=$(sudo blkid -s UUID | grep "$new_prt" | sed -e 's#.*: ##' | sed 's:"::g')
		if [[ ! -d $INST_PTH/etc ]]; then
			sudo mkdir $INST_PTH/etc
			if [[ ! -f $INST_PTH/etc/fstab ]]; then
				sudo touch $INST_PTH/etc/fstab
			fi
		fi
		echo "" | sudo tee -a $INST_PTH/etc/fstab > /dev/null
		echo "$fstab_entry    /$part    ext4    defaults    0    2" | sudo tee -a $INST_PTH/etc/fstab > /dev/null
		sleep 1
		echo
		separate_parts
	else
		echo
		echo "No other devices entered. Moving on. . ."
		sleep 1
		sudo rm -rf $INST_PTH/temp
	fi
}
echo
read -p "Did you use a separate /home or other partition[y/n]? " sep_hm
sleep 1
if [[ $sep_hm =~ ^([yY][eE][sS]|[yY])$ ]]; then
	echo
	separate_parts
else
	echo
	echo "No separate patitions used. Moving on. . ."
	sleep 1
fi
echo
read -p "Opening /etc/fstab to review and manually make changes. Showing you the UUID's for any partitions to add, eg. /home, /boot, /tmp, etc. Be sure to remove the \" after 'UUID='. All partition formatting should be pretty much the same, with the exception of the last number. Root partition should be a '1', others should be a '2'.(Press [ENTER] to continue) "
echo
echo

if ! dpkg --get-selections | grep -wq "xterm"; then
	apt install xterm
fi
sudo blkid
/usr/bin/xterm -e "bash -c \"sudo nano $INST_PTH/etc/fstab\""
echo
sleep 1

echo
usrnme=$(<$INST_PTH/usrnme.txt)
rm -rf $INST_PTH/{usrnme.txt,usrnme_psswrd.txt,new_psswrd.txt,usrnme_psswrd.txt}
echo "Username is $usrnme"
echo "Creating standard directories. . ."
sleep 1
USR_PTH="$INST_PTH/home/$usrnme"
for dir in \
        $USR_PTH/Downloads \
        $USR_PTH/Documents \
        $USR_PTH/"Modules&Apps" \
        $USR_PTH/pkg_bkups \
        $USR_PTH/Projects \
        $USR_PTH/scripts \
        $USR_PTH/Templates \
        $USR_PTH/Music \
        $USR_PTH/Pictures \
        $USR_PTH/Videos \
        $USR_PTH/tmp \
        $USR_PTH/Wallpapers
do
    if [[ ! -d "$dir" ]]; then
    	echo "Making $dir"
    	mkdir "$dir"
    else
    	echo "$dir exists"
    fi
    sleep .25
done
sleep 1

echo
read -p "Would you like to install your personal files for this installation(scripts, pkg_bkups, Documents, etc.[y/n]? " per_fls
sleep 1cf
	cp -rf $HOME/Documents $INST_PTH/home/$usrnme/
	cp -rf $HOME/"Modules&Apps" $INST_PTH/home/$usrnme/
	cp -rf $HOME/pkg_bkups $INST_PTH/home/$usrnme/
	cp -rf $HOME/Projects $INST_PTH/home/$usrnme/
	cp -rf $HOME/scripts $INST_PTH/home/$usrnme/
	cp -rf $HOME/Templates $INST_PTH/home/$usrnme/
	cp -rf $HOME/Music $INST_PTH/home/$usrnme/
	cp -rf $HOME/Pictures $INST_PTH/home/$usrnme/
	cp -rf $HOME/Videos $INST_PTH/home/$usrnme/
	cp -rf $HOME/tmp $INST_PTH/home/$usrnme/
	cp -rf $HOME/Wallpapers $INST_PTH/home/$usrnme/
	echo "Files copied."
	sleep 2

echo 
read -p "Would you like to install your config files for this installation(.config, .local, .cache, etc.[y/n]? " con_fls
sleep 1
if [[ "$con_fls" =~ ^([yY][eE][sS]|[yY])$ ]]; then
	echo "Copying config files from current system to new system. . ."
	cp -rf $HOME/.config $INST_PTH/home/$usrnme/
	cp -rf $HOME/.local $INST_PTH/home/$usrnme/
	cp -rf $HOME/.cache $INST_PTH/home/$usrnme/
	cp -rf $HOME/.Xresources $INST_PTH/home/$usrnme/
	echo "Files copied. You may want to delete select autostart files from .config/autostart."
	sleep 2
fi

echo
read -p "Would you like to copy your personal bash and conky files for this installation[y/n]? " cpy_sh
sleep 1
if [[ "$cpy_sh" =~ ^([yY][eE][sS]|[yY])$ ]]; then
	echo "Copying these files now. . ."
	sleep 1
    cp -rf $HOME/.conkyrc $INST_PTH/home/$usrnme/
    cp -rf $HOME/.conkyrc.bak $INST_PTH/home/$usrnme/
	cp -rf $HOME/.bashrc $INST_PTH/home/$usrnme/
fi
sleep 1

echo
read -p "Would you like to disable os-prober in grub[y/n]? " dis_ospr
sleep 1
	if [[ "$dis_ospr" =~ ^([yY][eE][sS]|[yY])$ ]]; then
		if grep "GRUB_DISABLE_OS_PROBER=true" /mnt/deb_inst/etc/default/grub; then
			echo
			echo "Already disabled."
			sleep 1
		else
			echo
			echo "Adding \"GRUB_DISABLE_OS_PROBER=true\" to $INST_PTH/default/grub"
			sleep 1
			echo "GRUB_DISABLE_OS_PROBER=true" | sudo tee -a $INST_PTH/etc/default/grub
		fi
	fi
sleep 1

echo
echo "Chroot'ing back in to environment to update grub and anything else you need. Type 'exit' when done. . ."
sleep 1
echo
grb_inst_su=$(echo "${part_name%?}")
grb_inst="$grb_inst_su"
sleep 1
grb_inst="$grb_inst" sudo chroot $INST_PTH env /bin/sh -c "echo \"grub-install $grb_inst\"; grub-install $grb_inst; echo; echo \"update-grub\"; update-grub; echo; echo; sh"
echo
sleep 1
echo

echo "Updating permissions to $usrnme"
sleep 1
sudo chown -R $usrnme:$usrnme $INST_PTH/home/$usrnme
echo
read -p "Pausing in case you missed something. You can open a new termianl and chroot back into enviroment(sudo chroot $INST_PTH /bin/sh), or open file explorer to $INST_PTH. Press [ENTER] to finish the process."
sleep 1

echo
echo "Making sure ownership is correct on /home/$usrnme directory. . ."
sudo chown -R $usrnme:$usrnme $INST_PTH/home/$usrnme
sleep 1

echo
echo "Attempting to umount devices and system files. . ."
echo
sleep 1
sudo umount -a
sudo umount $INST_PTH/proc
sudo umount $INST_PTH/sys
sudo umount $INST_PTH/dev/pts
sudo umount $INST_PTH/dev
sudo umount $INST_PTH

echo
echo "All done."
echo
sleep 1

exit
