#!/bin/bash
# This is a way to downgrade packges from apt. It is dependant upon having multiple distros listed in apt/sources.list. I.e., stable, unstable, testing, etc.
if [[ -z $1 ]]; then
	echo "${ILCOLOR2}Usage: downgrade chromium
       downgrade python3${ILRESTORE}"
	exit
fi

# Create tmp file to write version to.
VER_FILE="$HOME/tmp/version-file"
if [[ -f $VER_FILE ]]; then
	rm $VER_FILE
	touch $VER_FILE
elif [[ ! -f $VER_FILE ]]; then
	touch $VER_FILE
fi

# Create a list in a file and show versions on screen. Formatting is involved here to get correct string to install.
echo
echo "${ILCOLOR2}Here is a list of version of $1. . .${ILRESTORE}"
sleep 1
# Write list to file
apt list -a $1 | while read line; do
	echo "$line" >> $VER_FILE
done

# Variable for the installed version of package.
INST=$(grep "installed" $VER_FILE)
# Formatting list. 1-remove 'installed' line, in variable above.
sed -i '/installed/d' $VER_FILE
# Remove specfic junk lines.
sed -i 's:Listing...::g' $VER_FILE
# Remove empty lines.
sed -i '/^$/d' $VER_FILE

# Variable for numbering lines in file.
VER=1
# Read file then insert lines with line numbers.
cat $VER_FILE | while read line; do
	echo "$VER. $line" >> $VER_FILE
	let VER=$VER+1
done
# Remove lines not starting with numbers.
sed -i '/^[^0-9]/d' $VER_FILE
# Add '[installed]' to the first package line from $INST variable created above to show what version is currently installed.
sed -i "1i[installed] $INST" $VER_FILE
# Show file contents on screen to offer a choice.
cat $VER_FILE

# Choose the version to install. Created function so we could loop back to it.
function choose(){
	echo
	read -p "Choose number to install[0 to exit]: " num_inst
		sleep 1
		# Option to exit script
		if [[ "$num_inst" = 0 ]]; then
			echo
			echo "Exiting now. . ."
			rm $VER_FILE
			sleep 1
			exit
		fi
		# Error handling for entering number that doesn't exist.
		if ! grep -wq "^$num_inst" $VER_FILE; then
			echo
			echo "No $num_inst, try again. . ."
			sleep 1
			choose
		fi

# Variable show repeating install version for comfirmation.
i="$(grep -w "^$num_inst" $VER_FILE)"
echo
yn_crct="y"
read -p "${ILCOLOR2}Ok installing --> $i <-- is this correct[Y/n]?${ILRESTORE} " yn_crct
	sleep 1
	if [[ ! "$yn_crct" =~ ^([yY][eE][sS]|[yY])$ ]]; then
		echo
		echo "${ILCOLOR2}Try again. . .${ILRESTORE}"
		sleep 1
		choose
	fi
}
# Run choose funtion.
choose

inst_typ="r"
echo
# Option run update via repo release or by version number. 
read -p "Would you like to install via repo(testing, stable, etc.) or would you like to install via version number(3.5.796~9ud)? [r]epo install is recommended, if [r]epo install does NOT work, re-run and choose [v]ersion install.[R/v] " inst_typ
	sleep 1
	echo
	echo "${ILCOLOR2}We are downgrading with 'aptitude', you will be ask to choose a solution for downgrading. If you select 'n' for the first one, it will give more options each time you select 'n'.${ILRESTORE}"
	INST=$(grep -w "^$num_inst" $VER_FILE)
	if [[ $inst_typ =~ ^([rR][eE][pP][oO]|[rR])$ ]]; then
		# Repo release install type.
		VER_INST=$(echo $INST | awk '{print $2}')
		FOR_INST=$(echo "$VER_INST")
	else
		# Version number install type.
		VER_INST=$(echo $INST | awk '{print $3}')
		FOR_INST=$(echo "$1=$VER_INST")
	fi

# Install with aptitude.
echo 'spike' | sudo -S -v
sudo aptitude install $FOR_INST

# Clean up.
rm $VER_FILE
exit
