#!/bin/bash
# This is a blank bash script document.
# Put your code below this line.

<<Comment
# Check default gub file to make sure it's set up correctly
gr_def=$(grep "GRUB_DEFAULT=" /etc/default/grub)
if ! grep 'GRUB_DEFAULT="saved"' /etc/default/grub; then
	echo 'spike' | sudo -S sed -i 's:'"$gr_def"':GRUB_DEFAULT="saved":g' /etc/default/grub
	sudo update-grub
fi
gr_sv_def=$(grep "GRUB_SAVEDEFAULT=" /etc/default/grub)
if ! grep 'GRUB_SAVEDEFAULT="true"' /etc/default/grub; then
	echo 'spike' | sudo -S sed -i 's:'"$gr_sv_def"':GRUB_DEFAULT="true":g' /etc/default/grub
	sudo update-grub
fi
echo
echo "${ILCOLOR4}Showing grub menus entries. . ."
echo
sleep 1
Comment

# Create tmp menu file with menu entries
menu_file="$HOME/tmp/menu"
if [[ -f "$menu_file" ]]; then
	echo '' > $menu_file
else
	touch "$menu_file"
fi
echo -e "${ILRESTORE}"
n=0
# Formatting of the grep to add to the file
n=-1
grep "menuentry " /boot/grub/grub.cfg | gawk -F '\\ --class' '{print $1}' | sed "s:menuentry '::g" | sed "s:'::g" | sed 's:{::g' | gawk -F '\\menuentry "Memory test' '{print $1}' | sed 's:\t::g' | sed 's:menuentry ::g' | while read line; do
	let n=$n+1
	echo "$n. $line" >> "$menu_file"
done

# Remove last 2 memtest lines rom file
head -n -2 "$menu_file" > $HOME/tmp/tmp && mv $HOME/tmp/tmp "$menu_file" && rm -f $HOME/tmp/tmp

# Show file entries in terminal
cat $menu_file

# Option to choose menu entry
echo
read -p "${ILCOLOR4}Which menu entry number would you like to boot to(Type 'ex' to exit)? " men_en
if [[ $men_en = "ex" ]]; then
	echo
	echo "Exiting now. . . "
	rm -rf "$menu_file"
	sleep 1
	exit
fi
sleep 1

# Tells what kernel we are booting to and adds extra part to advance menu if needed. Then removes tmp file. Make adjustents for first entry here as well. Also grub menu actually starts a 0, so subtraction is neccessary for selection.
echo
echo "Booting to: $(grep "^$men_en. " $menu_file). . ."
sleep 1

# Setting up grub-reboot
echo 'spike' | sudo -S grub-reboot "$men_en"
echo $men_en
#echo 'spike' | sudo -S grub-reboot "$men_en"
rm -rf $menu_file

# Give you 10 seconds to decide
echo
echo "Rebooting in 10 seconds, press control-c to abort. . ."
# Show countdown
secs=$((10))
while [ $secs -gt 0 ]; do
   echo -ne "$secs\033[0K\r"
   sleep 1
   : $((secs--))
done
sudo reboot
