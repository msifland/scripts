#!/bin/bash

function func_b
{
		# declare local variables
		local {cache,pkgR,pkgI,pkgD,line,temp1,temp2,temp3}
		# get cache directory from file /etc/pacman.conf (without any white spaces) and write results to variable "cache":
		cache=$( awk -F '=' '/^CacheDir/ {gsub(" ","",$2); print $2}' '/etc/pacman.conf' )
		# set "cache" varialbe to default directory, if  variable "cache" is empty:
		if [[ -z $cache ]]  # if "cache" variable is empty
		then
			cache="/var/cache/pacman/pkg/"
		fi

		# 1. get list of last installs/upgrades/removes from pacman log and display result in fzf. in the end, fzf saves all selected package names (including the words "installed/upgraded/removed/downgraded" to file /tmp/roll_back-cache-packages
		tail -2000 /var/log/pacman.log | grep "\[ALPM\]" | grep "installed\|removed\|upgraded" | sed 's/\[ALPM\] //g' | fzf-tmux -m -e +s -i -1 --query="$input2" --cycle --tac --reverse --margin=4%,1%,1%,2% --inline-info --header="Press TAB to (un)select. Press ENTER to roll back. Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed list of recent Pacman changes > ' | sed 's/ ([^)]*)//g' | awk '{print $3 " " $4}' > /tmp/roll_back-cache-packages

		# only run the command inside the if-statement, if file /tmp/roll_back-cache-packages is not empty and exists - this happens when fzf is quit with ESC or CTRL+C
		if [[ -s /tmp/roll_back-cache-packages ]]
		then


			# 2. in case of conflicting packages, packages have to be first removed (with the force option, because other packages might still depend on them).
			#filter /tmp/roll_back-cache-packages file for the word "installed" and write package names to variable "pkg"
			pkgR=$( awk '/installed/ {print $2}' '/tmp/roll_back-cache-packages' )

			if [[ -n $pkgR ]]     # this if-condition avoids error message when no package gets removed (and $pkgR is empty)
			then
				sudo pacman -Rdd $pkgR --color always --noconfirm
			fi


			# 3. in case an "upgraded" package needs a package as dependency, the "removed" packages have to be installed.
			#filter /tmp/roll_back-cache-packages file for the word "removed" and write package names to file
			awk '/removed/ {print $2}' '/tmp/roll_back-cache-packages' > /tmp/pacui-cache-install

			if [[ -s /tmp/pacui-cache-install ]]     # this if-condition avoids error messages when no package gets installed (and  is empty)
			then

				# the file /tmp/pacui-install will later contain a list of file names of (old versions of) packages in cache. it has to be empty in the beginning!
				[[ -e /tmp/pacui-install ]] && rm /tmp/pacui-install           # check, whether file exists and delete it.

				# read line by line from file  in while loop and save that line to variable $line
				while IFS='' read -r line || [[ -n "$line" ]]
				do
					# write name of latest version in cache into file /tmp/pacui-install ("sort" puts latest version on top, which is then selected):
					find $cache -name "${line}-[0-9]*[0-9a-z.-_]*.pkg.tar.[gx]z" | sort -r | sed -n '1p' >> /tmp/pacui-install
				done < ""

				# write file into variable "pkgI" (otherwise, the "sudo pacman -U" command does not work) and unique sort /tmp/pacui-install (=remove duplicate lines without ordering the output)
				pkgI=$( sort -u /tmp/pacui-install )

				# install cannot be done as dependency, because sometimes packages are simply replaced by other packages. in this case, installing as dependency would be bad!
				sudo pacman -U $pkgI --color always --noconfirm

			fi


			# 4. filter /tmp/roll_back-cache-packages file for the word "upgraded" and write package names to file /tmp/pacui-cache-downgrade
			# /tmp/pacui-cache-downgrade contains list of package names to be downgraded!
			awk '/upgraded/ {print $2}' '/tmp/roll_back-cache-packages' > /tmp/pacui-cache-downgrade

			if [[ -s /tmp/pacui-cache-downgrade ]]     # this if-condition avoids error messages when no package gets downgraded (and /tmp/pacui-cache-downgrade is empty)
			then

				# first, count the number of times the package name appears in file /tmp/pacui-cache-downgrade:
				sort /tmp/pacui-cache-downgrade | uniq -c > /tmp/pacui-cache-downgrade-counted
				# first argument in /tmp/pacui-cache-downgrade-counted is the number of times the package name appears and the second is the package name.

				# the file /tmp/pacui-downgrade will later contain a list of file names of (old versions of) packages in cache. it has to be empty in the beginning!
				[[ -e /tmp/pacui-downgrade ]] && rm /tmp/pacui-downgrade           # check, whether file exists and delete it.

				# read line by line from file /tmp/pacui-cache-downgrade-counted in while loop and save that line to variable $line
				while read -r line && [[ -n "$line" ]]
				do

					# attention, the following variables can be empty:
					temp1=$( echo $line | awk '{print $1}' )   # this variable is the no. of times a package has to be downgraded
					temp2=$( echo $line | awk '{print $2}' )   # this variable is the package name to be downgraded

					if [[ -n $temp2 ]]   # checks, if variable is not empty
					then
						# write list with all versions of package in cache into file /tmp/pacui-temp-downgrade (sorted - newest package version is on top)
						find $cache -name "${temp2}-[0-9]*[0-9a-z.-_]*.pkg.tar.[gx]z" | sort -r > /tmp/pacui-temp-downgrade

						# temp3 is supposed to be "2p" when temp1=1 and "3p" when temp1=2 ...  --> needed for "sed" command below
						temp3="$(( temp1 + 1 ))p"
						# the next line moves the $((temp3-1))-th version below the currently installed package version to file /tmp/pacui-downgrade. if no such old version is available, nothing happens.
						# this command determines the currently installed verions of package $temp2:  pacman -Q "$temp2" | awk '{print $2}'
						grep "$( pacman -Q "$temp2" | awk '{print $2}' )" -A 100 "/tmp/pacui-temp-downgrade" | sed -n "$temp3" >> /tmp/pacui-downgrade
					fi

				done < "/tmp/pacui-cache-downgrade-counted"

				# write file into variable (otherwise, the "sudo pacman -U" command does not work)
				pkgD=$( cat /tmp/pacui-downgrade )

				# the following if-statement prevents the following error, in case there is no older package version available: "error: no targets specified (use -h for help)"
				if [[ -n $pkgD ]]   # checks, if variable is not empty
				then
					# downgrade packages by manually installing them: (sudo pacman -U --noconfirm --color always )
					sudo pacman -U $pkgD --color always --noconfirm
				fi

			fi


		fi
}


function func_d
{
		pacman -Slq > /tmp/pacui-packages-local
		pacman -Qq >> /tmp/pacui-packages-local

		local pkg
		pkg=$(sort -u /tmp/pacui-packages-local | fzf-tmux -m -e +s -i -1 --query="$input2" --cycle --reverse --margin=4%,1%,1%,2% --inline-info --header="Press TAB to (un)select. Press ENTER to downgrade. Press ESC or CTRL+C to quit." --prompt='Enter string to filter displayed list of packages > ' | awk '{print $1}' )

		downgrade $pkg
}

func_b
func_d
