#!/bin/bash

echo
echo "${ILCOLOR2}Purging old kernels. . .${ILRESTORE}"
sleep 1

# Ask for an amount of kernels to keep, default is 4 if no answer.
echo
read -t 10 -p "${ILCOLOR2}How many kernels would you like to keep? If no answer in 10 seconds, then default is 4. ${ILRESTORE}" COUNTER
if [[ $COUNTER = "" ]]; then
	COUNTER=4
fi

# Set file variable and creat files.
if [[ ! -d $HOME/tmp ]]; then
	mkdir $HOME/tmp
fi
KERNLIST="$HOME/tmp/kernelList"
FOR_REMOVAL_FILE="$HOME/tmp/for_removal"
touch $KERNLIST
touch $FOR_REMOVAL_FILE

# Get a list of installed kernels and write them to file.
ls /boot/vmlinuz* > $KERNLIST

# Assign varibale of number of installed kernels.
numberOfExtraKernels=`wc -l $KERNLIST | awk '{print $1}'`

# For loop list installed kernels in order of oldeest to newest.
COUNTER_LIST=1
for l in `cat $KERNLIST`; do    
   	echo "$l", "$COUNTER_LIST", "$numberOfExtraKernels"
    let "COUNTER_LIST +=1"
done

# Math function to create variable for head function later.
let "COUNT = $numberOfExtraKernels-$COUNTER"
echo

# Show the number and names of kernels to remove.
echo "${ILCOLOR2}Number of kernels to remove: $(if [ $COUNT -lt 0 ]; then echo "0"; else echo $COUNT; fi)${ILRESTORE}"

# If number to remove is greater than zero then: echo kernels to remove, sed: make sure kernels are coreect format for apt. Update grub when done.
if [ $COUNT -gt 0 ]; then
	FOR_REMOVAL=$(cat $KERNLIST | head -n"$COUNT")	
	echo $FOR_REMOVAL > $FOR_REMOVAL_FILE
	$(sed -i 's@/boot/vmlinuz-@linux-image-@g' $FOR_REMOVAL_FILE)
	echo $(cat $FOR_REMOVAL_FILE)
	sudo apt purge $(cat $FOR_REMOVAL_FILE)
	sudo update-grub
fi

# Remove files, no longer needed.
rm -f $KERNLIST
rm -f $FOR_REMOVAL_FILE
