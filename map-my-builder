#!/bin/bash

# Dependencies: program mkgmap, osmium. Also a mkgmap, gmt, and mkgmap-splitter folder downloaded from source.
# Switching to map directory and display what maps we are downloading

echo
echo "Running My Map Builder for Garmin devices. . ."
### Log date and time
echo -e ${ILCOLOR1}
DATE_START=$(date +"%s")
echo "Build Start Time:"
DATE=$(date +"%m-%d-%y")
echo "Date: $DATE"
TIME=$(date +"%r")
echo "Time: $TIME"
echo -e ${ILRESTORE}

echo
echo "${ILCOLOR1}Starting process of downloading and building Garmin map of the following Geofarik maps:"

# Get list of maps that are downloading based on download section below, starting at a certain line number.
# Alternate method using loop.
#SRCH=$(tail -n +50 $HOME/scripts/map_my_builder | grep '#state-')
#for i in $SRCH; do
#	echo $i | sed 's:#state-::g' | sed 's:state-dummy::'
#done
# One-liner method.
tail -n +50 $HOME/scripts/map-my-builder | awk '/#state-/' | sed 's:#state-::g' | sed 's:state-dummy::g'
echo -e ${ILRESTORE}
sleep 1

# Create directories if they don't exist.
if [[ ! -d "$HOME/maps" ]]; then
	mkdir "$HOME/maps"
fi
if [[ ! -d "$HOME/maps/Combine" ]]; then
	mkdir "$HOME/maps/Combine"
fi
if [[ -f "$HOME/maps/my_se_gmapsupp.img" ]]; then
	rm -rf $HOME/maps/my_se_gmapsupp.img.old
	mv $HOME/maps/my_se_gmapsupp.img $HOME/maps/my_se_gmapsupp.img.old
fi
if [[ ! -d "$HOME/maps/downloads" ]]; then
	mkdir "$HOME/maps/downloads"
else
	rm -rf $HOME/maps/downloads/*
fi
cd $HOME/maps

# Downloading maps from geofabrik.
echo
echo "${ILCOLOR1}Downloading maps...${ILRESTORE}"
sleep 1
echo

# Error handling variable for file size errors.
FILE=""
MINSZ=100000

#state-tennessee
wget -O $HOME/maps/downloads/tennessee_latest.osm.pbf http://download.geofabrik.de/north-america/us/tennessee-latest.osm.pbf
FILE="$HOME/maps/downloads/tennessee_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/tennessee_latest.osm.pbf http://download.geofabrik.de/north-america/us/tennessee-latest.osm.pbf
done
#state-missouri
wget -O $HOME/maps/downloads/missouri_latest.osm.pbf http://download.geofabrik.de/north-america/us/missouri-latest.osm.pbf
FILE="$HOME/maps/downloads/missouri_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/missouri_latest.osm.pbf http://download.geofabrik.de/north-america/us/missouri-latest.osm.pbf
done
#state-illinois
wget -O $HOME/maps/downloads/illinois_latest.osm.pbf http://download.geofabrik.de/north-america/us/illinois-latest.osm.pbf
FILE="$HOME/maps/downloads/illinois_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/illinois_latest.osm.pbf http://download.geofabrik.de/north-america/us/illinois-latest.osm.pbf
done
#state-indiana
wget -O $HOME/maps/downloads/indiana_latest.osm.pbf http://download.geofabrik.de/north-america/us/indiana-latest.osm.pbf
FILE="$HOME/maps/downloads/indiana_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/indiana_latest.osm.pbf http://download.geofabrik.de/north-america/us/indiana-latest.osm.pbf
done
#state-ohio
wget -O $HOME/maps/downloads/ohio_latest.osm.pbf http://download.geofabrik.de/north-america/us/ohio-latest.osm.pbf
FILE="$HOME/maps/downloads/ohio_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/ohio_latest.osm.pbf http://download.geofabrik.de/north-america/us/ohio-latest.osm.pbf
done
#state-west-virginia
wget -O $HOME/maps/downloads/west-virginia_latest.osm.pbf http://download.geofabrik.de/north-america/us/west-virginia-latest.osm.pbf
FILE="$HOME/maps/downloads/west-virginia_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/west-virginia_latest.osm.pbf http://download.geofabrik.de/north-america/us/west-virginia-latest.osm.pbf
done
#state-maryland
wget -O $HOME/maps/downloads/maryland_latest.osm.pbf http://download.geofabrik.de/north-america/us/maryland-latest.osm.pbf
FILE="$HOME/maps/downloads/maryland_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/maryland_latest.osm.pbf http://download.geofabrik.de/north-america/us/maryland-latest.osm.pbf
done
#state-kentucky
wget -O $HOME/maps/downloads/kentucky_latest.osm.pbf http://download.geofabrik.de/north-america/us/kentucky-latest.osm.pbf
FILE="$HOME/maps/downloads/kentucky_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/kentucky_latest.osm.pbf http://download.geofabrik.de/north-america/us/kentucky-latest.osm.pbf
done
#state-virginia
wget -O $HOME/maps/downloads/virginia_latest.osm.pbf http://download.geofabrik.de/north-america/us/virginia-latest.osm.pbf
FILE="$HOME/maps/downloads/virginia_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/virginia_latest.osm.pbf http://download.geofabrik.de/north-america/us/virginia-latest.osm.pbf
done
#state-arkansas
wget -O $HOME/maps/downloads/arkansas_latest.osm.pbf http://download.geofabrik.de/north-america/us/arkansas-latest.osm.pbf
FILE="$HOME/maps/downloads/arkansas_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/arkansas_latest.osm.pbf http://download.geofabrik.de/north-america/us/arkansas-latest.osm.pbf
done
#state-north-carolina
wget -O $HOME/maps/downloads/north-carolina_latest.osm.pbf http://download.geofabrik.de/north-america/us/north-carolina-latest.osm.pbf
FILE="$HOME/maps/downloads/north-carolina_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/north-carolina_latest.osm.pbf http://download.geofabrik.de/north-america/us/north-carolina-latest.osm.pbf
done
#state-south-carolina
wget -O $HOME/maps/downloads/south-carolina_latest.osm.pbf http://download.geofabrik.de/north-america/us/south-carolina-latest.osm.pbf
FILE="$HOME/maps/downloads/south-carolina_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/south-carolina_latest.osm.pbf http://download.geofabrik.de/north-america/us/south-carolina-latest.osm.pbf
done
#state-louisiana
wget -O $HOME/maps/downloads/louisiana_latest.osm.pbf http://download.geofabrik.de/north-america/us/louisiana-latest.osm.pbf
FILE="$HOME/maps/downloads/louisiana_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/louisiana_latest.osm.pbf http://download.geofabrik.de/north-america/us/louisiana-latest.osm.pbf
done
#state-mississippi
wget -O $HOME/maps/downloads/mississippi_latest.osm.pbf http://download.geofabrik.de/north-america/us/mississippi-latest.osm.pbf
FILE="$HOME/maps/downloads/mississippi_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/mississippi_latest.osm.pbf http://download.geofabrik.de/north-america/us/mississippi-latest.osm.pbf
done
#state-alabama
wget -O $HOME/maps/downloads/alabama_latest.osm.pbf http://download.geofabrik.de/north-america/us/alabama-latest.osm.pbf
FILE="$HOME/maps/downloads/alabama_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/alabama_latest.osm.pbf http://download.geofabrik.de/north-america/us/alabama-latest.osm.pbf
done
#state-georgia
wget -O $HOME/maps/downloads/georgia_latest.osm.pbf http://download.geofabrik.de/north-america/us/georgia-latest.osm.pbf
FILE="$HOME/maps/downloads/georgia_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/georgia_latest.osm.pbf http://download.geofabrik.de/north-america/us/georgia-latest.osm.pbf
done
#state-florida
wget -O $HOME/maps/downloads/florida_latest.osm.pbf http://download.geofabrik.de/north-america/us/florida-latest.osm.pbf
FILE="$HOME/maps/downloads/florida_latest.osm.pbf"
ACTSZ=$(wc -c <"$FILE")
while [ $ACTSZ -lt $MINSZ ]; do
	wget -O $HOME/maps/downloads/florida_latest.osm.pbf http://download.geofabrik.de/north-america/us/florida-latest.osm.pbf
done
#state-state-dummy
#wget -O $HOME/maps/downloads/state-dummy_latest.osm.pbf http://download.geofabrik.de/north-america/us/state-dummy-latest.osm.pbf
#FILE="$HOME/maps/downloads/state-dummy_latest.osm.pbf"
#ACTSZ=$(wc -c <"$FILE")
#while [ $ACTSZ -lt $MINSZ ]; do
#	wget -O $HOME/maps/downloads/state-dummy_latest.osm.pbf http://download.geofabrik.de/north-america/us/state-dummy-latest.osm.pbf
#done

# Use osmium program to combine the above downloaded maps into one .osm.pbf file. This is needed because of the individual file ID numbers.
echo
echo "${ILCOLOR1}Combining osm.pbf files using osmium...${ILRESTORE}"
sleep 1
osmium merge $HOME/maps/downloads/*.osm.pbf -v -O -o $HOME/maps/Combine/my_se.osm.pbf

# Formatting for faster and better processing.
echo
echo "${ILCOLOR1}Converting .pbf file to .o5m for faster formatting using osmconvert...${ILRESTORE}"
sleep 1
cd $HOME/maps/Combine
osmconvert --drop-version $HOME/maps/Combine/my_se.osm.pbf -o=$HOME/maps/Combine/my_se.o5m

# Splitting the file with mkgmap program for managable conversion of size.
echo
echo "${ILCOLOR1}Splitting file...${ILRESTORE}"
sleep 1
mkgmap-splitter $HOME/maps/Combine/my_se.o5m --max-nodes=800000 --output=xml
# Different ways to run, messes up sometimes, these are run without the osmconver command above.
#mkgmap-splitter $HOME/maps/Combine/my_se.osm.pbf --max-threads=2 --max-nodes=800000 --output=xml
#java -jar /home/msifland/maps/splitter-r592/splitter.jar $HOME/maps/Combine/my_se.osm.pbf --max-nodes=800000 --output=xml

# Re-combing all split files into one Garmin .img file.
echo
echo "${ILCOLOR1}Creating img, this will take a while...${ILRESTORE}"
sleep 1
mkgmap --style-file=$HOME/maps/styles/mine  --family-id=2000 --route --gmapsupp *.osm.gz $HOME/maps/my_custom.typ

# Check for completed .img file and move to home/maps folder and the to Garmin device, if connected.
if [[ -f $HOME/maps/Combine/gmapsupp.img ]]; then
	echo
	echo "${ILCOLOR1}Moving gmapsupp.img to Maps folder and renaming to us_se_mw_gmapsupp.img...${ILRESTORE}"
	mv $HOME/maps/Combine/gmapsupp.img $HOME/maps/my_se_gmapsupp.img
	sleep 1

	echo
	echo "${ILCOLOR1}Checking for Garmin Device. . .${ILRESTORE}"
	sleep 1
	if [[ -d "/media/msifland/D216-4B4C" ]]; then
		echo "Garming device found. . ."
		echo
		sleep 1
		if [[ -f /media/msifland/D216-4B4C/Garmin/my_se_gmapsupp.img ]];then
			echo "${ILCOLOR1}Removing old map from device. . .${ILRESTORE}"
			rm -rf /media/msifland/D216-4B4C/Garmin/my_se_gmapsupp.img
			echo
			sleep 1
		fi
		echo "${ILCOLOR1}Copying new map to Garmin device. . .${ILRESTORE}"
		rsync --progress --verbose $HOME/maps/my_se_gmapsupp.img /media/msifland/D216-4B4C/Garmin/my_se_gmapsupp.img
	else
		echo
		echo "${ILCOLOR1}No Garmin Device found. Copy manually later.${ILRESTORE}"
	fi
	sleep 1

	# Only clean up files if map.img was created successfully. Don't delete so a manual re-run can be done for error checking.
	echo
	echo "${ILCOLOR1}Cleaning up files...${ILRESTORE}"
	sleep 1
	rm -rf $HOME/maps/Combine/*
	rm -rf $HOME/maps/*.osm.pbf
else
	echo
	echo "${ILCOLOR1}No map file was created, check for errors...${ILRESTORE}"
fi

echo
echo "${ILCOLOR1}Finished."
sleep 1
echo "Build End Time:"
DATE=$(date +"%m-%d-%y")
echo "Date: $DATE"
TIME=$(date +"%r")
echo "Time: $TIME"
DATE_END=$(date +"%s")
DIFF=$(($DATE_END - $DATE_START))
echo "It took $(($DIFF / 3600 )) hours $((($DIFF % 3600) / 60)) minutes $(($DIFF % 60)) seconds to build."
echo -e "${ILRESTORE}"

cd $HOME
$HOME/scripts/free-ram
exit
